
Final_Project_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002450  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  00002450  000024e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000fa  008000fa  0000257e  2**0
                  ALLOC
  3 .stab         00002370  00000000  00000000  00002580  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f0c  00000000  00000000  000048f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000057fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000593c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000076f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000085e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009390  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000094f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000977d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009f4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 10 10 	jmp	0x2020	; 0x2020 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e5       	ldi	r30, 0x50	; 80
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3f       	cpi	r26, 0xFA	; 250
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ef       	ldi	r26, 0xFA	; 250
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3f       	cpi	r26, 0xFD	; 253
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <main>
      8a:	0c 94 26 12 	jmp	0x244c	; 0x244c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af ed       	ldi	r26, 0xDF	; 223
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c6 11 	jmp	0x238c	; 0x238c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8f ed       	ldi	r24, 0xDF	; 223
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c6 11 	jmp	0x238c	; 0x238c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d6 11 	jmp	0x23ac	; 0x23ac <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <get_password>:
#include "timer.h"

uint8 clear = 0;

void get_password(uint8 password[])
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	61 97       	sbiw	r28, 0x11	; 17
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	99 8b       	std	Y+17, r25	; 0x11
     b60:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i = 0;
     b62:	1f 86       	std	Y+15, r1	; 0x0f
	for (i = 0; i < 5 ; i++)
     b64:	1f 86       	std	Y+15, r1	; 0x0f
     b66:	88 c0       	rjmp	.+272    	; 0xc78 <get_password+0x132>
	{
		password[i] = KeyPad_getPressedKey();
     b68:	8f 85       	ldd	r24, Y+15	; 0x0f
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	88 89       	ldd	r24, Y+16	; 0x10
     b70:	99 89       	ldd	r25, Y+17	; 0x11
     b72:	8c 01       	movw	r16, r24
     b74:	02 0f       	add	r16, r18
     b76:	13 1f       	adc	r17, r19
     b78:	0e 94 a1 06 	call	0xd42	; 0xd42 <KeyPad_getPressedKey>
     b7c:	f8 01       	movw	r30, r16
     b7e:	80 83       	st	Z, r24
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	a8 e4       	ldi	r26, 0x48	; 72
     b86:	b2 e4       	ldi	r27, 0x42	; 66
     b88:	8b 87       	std	Y+11, r24	; 0x0b
     b8a:	9c 87       	std	Y+12, r25	; 0x0c
     b8c:	ad 87       	std	Y+13, r26	; 0x0d
     b8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b90:	6b 85       	ldd	r22, Y+11	; 0x0b
     b92:	7c 85       	ldd	r23, Y+12	; 0x0c
     b94:	8d 85       	ldd	r24, Y+13	; 0x0d
     b96:	9e 85       	ldd	r25, Y+14	; 0x0e
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	4a ef       	ldi	r20, 0xFA	; 250
     b9e:	54 e4       	ldi	r21, 0x44	; 68
     ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba4:	dc 01       	movw	r26, r24
     ba6:	cb 01       	movw	r24, r22
     ba8:	8f 83       	std	Y+7, r24	; 0x07
     baa:	98 87       	std	Y+8, r25	; 0x08
     bac:	a9 87       	std	Y+9, r26	; 0x09
     bae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb0:	6f 81       	ldd	r22, Y+7	; 0x07
     bb2:	78 85       	ldd	r23, Y+8	; 0x08
     bb4:	89 85       	ldd	r24, Y+9	; 0x09
     bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	40 e8       	ldi	r20, 0x80	; 128
     bbe:	5f e3       	ldi	r21, 0x3F	; 63
     bc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc4:	88 23       	and	r24, r24
     bc6:	2c f4       	brge	.+10     	; 0xbd2 <get_password+0x8c>
		__ticks = 1;
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	9e 83       	std	Y+6, r25	; 0x06
     bce:	8d 83       	std	Y+5, r24	; 0x05
     bd0:	3f c0       	rjmp	.+126    	; 0xc50 <get_password+0x10a>
	else if (__tmp > 65535)
     bd2:	6f 81       	ldd	r22, Y+7	; 0x07
     bd4:	78 85       	ldd	r23, Y+8	; 0x08
     bd6:	89 85       	ldd	r24, Y+9	; 0x09
     bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	3f ef       	ldi	r19, 0xFF	; 255
     bde:	4f e7       	ldi	r20, 0x7F	; 127
     be0:	57 e4       	ldi	r21, 0x47	; 71
     be2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be6:	18 16       	cp	r1, r24
     be8:	4c f5       	brge	.+82     	; 0xc3c <get_password+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bea:	6b 85       	ldd	r22, Y+11	; 0x0b
     bec:	7c 85       	ldd	r23, Y+12	; 0x0c
     bee:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	40 e2       	ldi	r20, 0x20	; 32
     bf8:	51 e4       	ldi	r21, 0x41	; 65
     bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bfe:	dc 01       	movw	r26, r24
     c00:	cb 01       	movw	r24, r22
     c02:	bc 01       	movw	r22, r24
     c04:	cd 01       	movw	r24, r26
     c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0a:	dc 01       	movw	r26, r24
     c0c:	cb 01       	movw	r24, r22
     c0e:	9e 83       	std	Y+6, r25	; 0x06
     c10:	8d 83       	std	Y+5, r24	; 0x05
     c12:	0f c0       	rjmp	.+30     	; 0xc32 <get_password+0xec>
     c14:	88 ec       	ldi	r24, 0xC8	; 200
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	9c 83       	std	Y+4, r25	; 0x04
     c1a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1c:	8b 81       	ldd	r24, Y+3	; 0x03
     c1e:	9c 81       	ldd	r25, Y+4	; 0x04
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	f1 f7       	brne	.-4      	; 0xc20 <get_password+0xda>
     c24:	9c 83       	std	Y+4, r25	; 0x04
     c26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c28:	8d 81       	ldd	r24, Y+5	; 0x05
     c2a:	9e 81       	ldd	r25, Y+6	; 0x06
     c2c:	01 97       	sbiw	r24, 0x01	; 1
     c2e:	9e 83       	std	Y+6, r25	; 0x06
     c30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c32:	8d 81       	ldd	r24, Y+5	; 0x05
     c34:	9e 81       	ldd	r25, Y+6	; 0x06
     c36:	00 97       	sbiw	r24, 0x00	; 0
     c38:	69 f7       	brne	.-38     	; 0xc14 <get_password+0xce>
     c3a:	14 c0       	rjmp	.+40     	; 0xc64 <get_password+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3c:	6f 81       	ldd	r22, Y+7	; 0x07
     c3e:	78 85       	ldd	r23, Y+8	; 0x08
     c40:	89 85       	ldd	r24, Y+9	; 0x09
     c42:	9a 85       	ldd	r25, Y+10	; 0x0a
     c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	9e 83       	std	Y+6, r25	; 0x06
     c4e:	8d 83       	std	Y+5, r24	; 0x05
     c50:	8d 81       	ldd	r24, Y+5	; 0x05
     c52:	9e 81       	ldd	r25, Y+6	; 0x06
     c54:	9a 83       	std	Y+2, r25	; 0x02
     c56:	89 83       	std	Y+1, r24	; 0x01
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	01 97       	sbiw	r24, 0x01	; 1
     c5e:	f1 f7       	brne	.-4      	; 0xc5c <get_password+0x116>
     c60:	9a 83       	std	Y+2, r25	; 0x02
     c62:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		LCD_goToRowColumn(1,i);
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	6f 85       	ldd	r22, Y+15	; 0x0f
     c68:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <LCD_goToRowColumn>
		//LCD_intgerToString(password[i]);
		LCD_displayCharacter('*');
     c6c:	8a e2       	ldi	r24, 0x2A	; 42
     c6e:	0e 94 b6 09 	call	0x136c	; 0x136c <LCD_displayCharacter>
uint8 clear = 0;

void get_password(uint8 password[])
{
	uint8 i = 0;
	for (i = 0; i < 5 ; i++)
     c72:	8f 85       	ldd	r24, Y+15	; 0x0f
     c74:	8f 5f       	subi	r24, 0xFF	; 255
     c76:	8f 87       	std	Y+15, r24	; 0x0f
     c78:	8f 85       	ldd	r24, Y+15	; 0x0f
     c7a:	85 30       	cpi	r24, 0x05	; 5
     c7c:	08 f4       	brcc	.+2      	; 0xc80 <get_password+0x13a>
     c7e:	74 cf       	rjmp	.-280    	; 0xb68 <get_password+0x22>
		_delay_ms(50);
		LCD_goToRowColumn(1,i);
		//LCD_intgerToString(password[i]);
		LCD_displayCharacter('*');
	}
	KeyPad_getPressedKey();
     c80:	0e 94 a1 06 	call	0xd42	; 0xd42 <KeyPad_getPressedKey>
	LCD_clearScreen();
     c84:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <LCD_clearScreen>
}
     c88:	61 96       	adiw	r28, 0x11	; 17
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	1f 91       	pop	r17
     c9a:	0f 91       	pop	r16
     c9c:	08 95       	ret

00000c9e <cmp>:

uint8 cmp (uint8 password_1[], uint8 password_2[])
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <cmp+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <cmp+0x8>
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <cmp+0xa>
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	9b 83       	std	Y+3, r25	; 0x03
     cae:	8a 83       	std	Y+2, r24	; 0x02
     cb0:	7d 83       	std	Y+5, r23	; 0x05
     cb2:	6c 83       	std	Y+4, r22	; 0x04
	for(uint8 i = 0; i < 5; i++)
     cb4:	19 82       	std	Y+1, r1	; 0x01
     cb6:	19 c0       	rjmp	.+50     	; 0xcea <cmp+0x4c>
	{
		if (password_1[i] != password_2[i]) return 0;
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	9b 81       	ldd	r25, Y+3	; 0x03
     cc2:	fc 01       	movw	r30, r24
     cc4:	e2 0f       	add	r30, r18
     cc6:	f3 1f       	adc	r31, r19
     cc8:	40 81       	ld	r20, Z
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	8c 81       	ldd	r24, Y+4	; 0x04
     cd2:	9d 81       	ldd	r25, Y+5	; 0x05
     cd4:	fc 01       	movw	r30, r24
     cd6:	e2 0f       	add	r30, r18
     cd8:	f3 1f       	adc	r31, r19
     cda:	80 81       	ld	r24, Z
     cdc:	48 17       	cp	r20, r24
     cde:	11 f0       	breq	.+4      	; 0xce4 <cmp+0x46>
     ce0:	1e 82       	std	Y+6, r1	; 0x06
     ce2:	08 c0       	rjmp	.+16     	; 0xcf4 <cmp+0x56>
	LCD_clearScreen();
}

uint8 cmp (uint8 password_1[], uint8 password_2[])
{
	for(uint8 i = 0; i < 5; i++)
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	8f 5f       	subi	r24, 0xFF	; 255
     ce8:	89 83       	std	Y+1, r24	; 0x01
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	85 30       	cpi	r24, 0x05	; 5
     cee:	20 f3       	brcs	.-56     	; 0xcb8 <cmp+0x1a>
	{
		if (password_1[i] != password_2[i]) return 0;
	}

	return 1;
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	8e 83       	std	Y+6, r24	; 0x06
     cf4:	8e 81       	ldd	r24, Y+6	; 0x06
}
     cf6:	26 96       	adiw	r28, 0x06	; 6
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	cf 91       	pop	r28
     d04:	df 91       	pop	r29
     d06:	08 95       	ret

00000d08 <LCD_clear>:

void LCD_clear(void)
{
     d08:	df 93       	push	r29
     d0a:	cf 93       	push	r28
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
	if (clear == 1)
     d10:	80 91 fa 00 	lds	r24, 0x00FA
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	59 f4       	brne	.+22     	; 0xd2e <LCD_clear+0x26>
	{
		LCD_clearScreen();
     d18:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <LCD_clearScreen>
		clear = 0;
     d1c:	10 92 fa 00 	sts	0x00FA, r1
		SREG &= ~(1 << 7); // I_bit
     d20:	af e5       	ldi	r26, 0x5F	; 95
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	ef e5       	ldi	r30, 0x5F	; 95
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	8f 77       	andi	r24, 0x7F	; 127
     d2c:	8c 93       	st	X, r24
	}
	SREG &= ~(1 << 7); // I_bit
     d2e:	af e5       	ldi	r26, 0x5F	; 95
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	ef e5       	ldi	r30, 0x5F	; 95
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	8f 77       	andi	r24, 0x7F	; 127
     d3a:	8c 93       	st	X, r24
}
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	00 d0       	rcall	.+0      	; 0xd48 <KeyPad_getPressedKey+0x6>
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     d4c:	1a 82       	std	Y+2, r1	; 0x02
     d4e:	4c c0       	rjmp	.+152    	; 0xde8 <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
     d50:	ea e3       	ldi	r30, 0x3A	; 58
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	80 e1       	ldi	r24, 0x10	; 16
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <KeyPad_getPressedKey+0x22>
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	2a 95       	dec	r18
     d66:	e2 f7       	brpl	.-8      	; 0xd60 <KeyPad_getPressedKey+0x1e>
     d68:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
     d6a:	eb e3       	ldi	r30, 0x3B	; 59
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	80 e1       	ldi	r24, 0x10	; 16
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	02 2e       	mov	r0, r18
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <KeyPad_getPressedKey+0x3e>
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	0a 94       	dec	r0
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <KeyPad_getPressedKey+0x3a>
     d84:	80 95       	com	r24
     d86:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
     d88:	19 82       	std	Y+1, r1	; 0x01
     d8a:	28 c0       	rjmp	.+80     	; 0xddc <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
     d8c:	e9 e3       	ldi	r30, 0x39	; 57
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	28 2f       	mov	r18, r24
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	88 2f       	mov	r24, r24
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	a9 01       	movw	r20, r18
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <KeyPad_getPressedKey+0x62>
     da0:	55 95       	asr	r21
     da2:	47 95       	ror	r20
     da4:	8a 95       	dec	r24
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <KeyPad_getPressedKey+0x5e>
     da8:	ca 01       	movw	r24, r20
     daa:	81 70       	andi	r24, 0x01	; 1
     dac:	90 70       	andi	r25, 0x00	; 0
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	91 f4       	brne	.+36     	; 0xdd6 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	88 2f       	mov	r24, r24
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	98 2f       	mov	r25, r24
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	89 0f       	add	r24, r25
     dc6:	8f 5f       	subi	r24, 0xFF	; 255
     dc8:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	8f 5f       	subi	r24, 0xFF	; 255
     dda:	89 83       	std	Y+1, r24	; 0x01
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	84 30       	cpi	r24, 0x04	; 4
     de0:	a8 f2       	brcs	.-86     	; 0xd8c <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	8f 5f       	subi	r24, 0xFF	; 255
     de6:	8a 83       	std	Y+2, r24	; 0x02
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	84 30       	cpi	r24, 0x04	; 4
     dec:	08 f4       	brcc	.+2      	; 0xdf0 <KeyPad_getPressedKey+0xae>
     dee:	b0 cf       	rjmp	.-160    	; 0xd50 <KeyPad_getPressedKey+0xe>
     df0:	ad cf       	rjmp	.-166    	; 0xd4c <KeyPad_getPressedKey+0xa>

00000df2 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	00 d0       	rcall	.+0      	; 0xdf8 <KeyPad_4x4_adjustKeyNumber+0x6>
     df8:	00 d0       	rcall	.+0      	; 0xdfa <KeyPad_4x4_adjustKeyNumber+0x8>
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	3c 83       	std	Y+4, r19	; 0x04
     e08:	2b 83       	std	Y+3, r18	; 0x03
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	9c 81       	ldd	r25, Y+4	; 0x04
     e0e:	88 30       	cpi	r24, 0x08	; 8
     e10:	91 05       	cpc	r25, r1
     e12:	09 f4       	brne	.+2      	; 0xe16 <KeyPad_4x4_adjustKeyNumber+0x24>
     e14:	70 c0       	rjmp	.+224    	; 0xef6 <KeyPad_4x4_adjustKeyNumber+0x104>
     e16:	2b 81       	ldd	r18, Y+3	; 0x03
     e18:	3c 81       	ldd	r19, Y+4	; 0x04
     e1a:	29 30       	cpi	r18, 0x09	; 9
     e1c:	31 05       	cpc	r19, r1
     e1e:	5c f5       	brge	.+86     	; 0xe76 <KeyPad_4x4_adjustKeyNumber+0x84>
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	9c 81       	ldd	r25, Y+4	; 0x04
     e24:	84 30       	cpi	r24, 0x04	; 4
     e26:	91 05       	cpc	r25, r1
     e28:	09 f4       	brne	.+2      	; 0xe2c <KeyPad_4x4_adjustKeyNumber+0x3a>
     e2a:	59 c0       	rjmp	.+178    	; 0xede <KeyPad_4x4_adjustKeyNumber+0xec>
     e2c:	2b 81       	ldd	r18, Y+3	; 0x03
     e2e:	3c 81       	ldd	r19, Y+4	; 0x04
     e30:	25 30       	cpi	r18, 0x05	; 5
     e32:	31 05       	cpc	r19, r1
     e34:	9c f4       	brge	.+38     	; 0xe5c <KeyPad_4x4_adjustKeyNumber+0x6a>
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	9c 81       	ldd	r25, Y+4	; 0x04
     e3a:	82 30       	cpi	r24, 0x02	; 2
     e3c:	91 05       	cpc	r25, r1
     e3e:	09 f4       	brne	.+2      	; 0xe42 <KeyPad_4x4_adjustKeyNumber+0x50>
     e40:	48 c0       	rjmp	.+144    	; 0xed2 <KeyPad_4x4_adjustKeyNumber+0xe0>
     e42:	2b 81       	ldd	r18, Y+3	; 0x03
     e44:	3c 81       	ldd	r19, Y+4	; 0x04
     e46:	23 30       	cpi	r18, 0x03	; 3
     e48:	31 05       	cpc	r19, r1
     e4a:	0c f0       	brlt	.+2      	; 0xe4e <KeyPad_4x4_adjustKeyNumber+0x5c>
     e4c:	45 c0       	rjmp	.+138    	; 0xed8 <KeyPad_4x4_adjustKeyNumber+0xe6>
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
     e50:	9c 81       	ldd	r25, Y+4	; 0x04
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	91 05       	cpc	r25, r1
     e56:	09 f4       	brne	.+2      	; 0xe5a <KeyPad_4x4_adjustKeyNumber+0x68>
     e58:	39 c0       	rjmp	.+114    	; 0xecc <KeyPad_4x4_adjustKeyNumber+0xda>
     e5a:	67 c0       	rjmp	.+206    	; 0xf2a <KeyPad_4x4_adjustKeyNumber+0x138>
     e5c:	2b 81       	ldd	r18, Y+3	; 0x03
     e5e:	3c 81       	ldd	r19, Y+4	; 0x04
     e60:	26 30       	cpi	r18, 0x06	; 6
     e62:	31 05       	cpc	r19, r1
     e64:	09 f4       	brne	.+2      	; 0xe68 <KeyPad_4x4_adjustKeyNumber+0x76>
     e66:	41 c0       	rjmp	.+130    	; 0xeea <KeyPad_4x4_adjustKeyNumber+0xf8>
     e68:	8b 81       	ldd	r24, Y+3	; 0x03
     e6a:	9c 81       	ldd	r25, Y+4	; 0x04
     e6c:	87 30       	cpi	r24, 0x07	; 7
     e6e:	91 05       	cpc	r25, r1
     e70:	0c f0       	brlt	.+2      	; 0xe74 <KeyPad_4x4_adjustKeyNumber+0x82>
     e72:	3e c0       	rjmp	.+124    	; 0xef0 <KeyPad_4x4_adjustKeyNumber+0xfe>
     e74:	37 c0       	rjmp	.+110    	; 0xee4 <KeyPad_4x4_adjustKeyNumber+0xf2>
     e76:	2b 81       	ldd	r18, Y+3	; 0x03
     e78:	3c 81       	ldd	r19, Y+4	; 0x04
     e7a:	2c 30       	cpi	r18, 0x0C	; 12
     e7c:	31 05       	cpc	r19, r1
     e7e:	09 f4       	brne	.+2      	; 0xe82 <KeyPad_4x4_adjustKeyNumber+0x90>
     e80:	46 c0       	rjmp	.+140    	; 0xf0e <KeyPad_4x4_adjustKeyNumber+0x11c>
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	9c 81       	ldd	r25, Y+4	; 0x04
     e86:	8d 30       	cpi	r24, 0x0D	; 13
     e88:	91 05       	cpc	r25, r1
     e8a:	5c f4       	brge	.+22     	; 0xea2 <KeyPad_4x4_adjustKeyNumber+0xb0>
     e8c:	2b 81       	ldd	r18, Y+3	; 0x03
     e8e:	3c 81       	ldd	r19, Y+4	; 0x04
     e90:	2a 30       	cpi	r18, 0x0A	; 10
     e92:	31 05       	cpc	r19, r1
     e94:	b1 f1       	breq	.+108    	; 0xf02 <KeyPad_4x4_adjustKeyNumber+0x110>
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	9c 81       	ldd	r25, Y+4	; 0x04
     e9a:	8b 30       	cpi	r24, 0x0B	; 11
     e9c:	91 05       	cpc	r25, r1
     e9e:	a4 f5       	brge	.+104    	; 0xf08 <KeyPad_4x4_adjustKeyNumber+0x116>
     ea0:	2d c0       	rjmp	.+90     	; 0xefc <KeyPad_4x4_adjustKeyNumber+0x10a>
     ea2:	2b 81       	ldd	r18, Y+3	; 0x03
     ea4:	3c 81       	ldd	r19, Y+4	; 0x04
     ea6:	2e 30       	cpi	r18, 0x0E	; 14
     ea8:	31 05       	cpc	r19, r1
     eaa:	b9 f1       	breq	.+110    	; 0xf1a <KeyPad_4x4_adjustKeyNumber+0x128>
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	9c 81       	ldd	r25, Y+4	; 0x04
     eb0:	8e 30       	cpi	r24, 0x0E	; 14
     eb2:	91 05       	cpc	r25, r1
     eb4:	7c f1       	brlt	.+94     	; 0xf14 <KeyPad_4x4_adjustKeyNumber+0x122>
     eb6:	2b 81       	ldd	r18, Y+3	; 0x03
     eb8:	3c 81       	ldd	r19, Y+4	; 0x04
     eba:	2f 30       	cpi	r18, 0x0F	; 15
     ebc:	31 05       	cpc	r19, r1
     ebe:	79 f1       	breq	.+94     	; 0xf1e <KeyPad_4x4_adjustKeyNumber+0x12c>
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	9c 81       	ldd	r25, Y+4	; 0x04
     ec4:	80 31       	cpi	r24, 0x10	; 16
     ec6:	91 05       	cpc	r25, r1
     ec8:	69 f1       	breq	.+90     	; 0xf24 <KeyPad_4x4_adjustKeyNumber+0x132>
     eca:	2f c0       	rjmp	.+94     	; 0xf2a <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
     ecc:	97 e0       	ldi	r25, 0x07	; 7
     ece:	9a 83       	std	Y+2, r25	; 0x02
     ed0:	2e c0       	rjmp	.+92     	; 0xf2e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
     ed2:	28 e0       	ldi	r18, 0x08	; 8
     ed4:	2a 83       	std	Y+2, r18	; 0x02
     ed6:	2b c0       	rjmp	.+86     	; 0xf2e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
     ed8:	39 e0       	ldi	r19, 0x09	; 9
     eda:	3a 83       	std	Y+2, r19	; 0x02
     edc:	28 c0       	rjmp	.+80     	; 0xf2e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
     ede:	85 e2       	ldi	r24, 0x25	; 37
     ee0:	8a 83       	std	Y+2, r24	; 0x02
     ee2:	25 c0       	rjmp	.+74     	; 0xf2e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
     ee4:	94 e0       	ldi	r25, 0x04	; 4
     ee6:	9a 83       	std	Y+2, r25	; 0x02
     ee8:	22 c0       	rjmp	.+68     	; 0xf2e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
     eea:	25 e0       	ldi	r18, 0x05	; 5
     eec:	2a 83       	std	Y+2, r18	; 0x02
     eee:	1f c0       	rjmp	.+62     	; 0xf2e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
     ef0:	36 e0       	ldi	r19, 0x06	; 6
     ef2:	3a 83       	std	Y+2, r19	; 0x02
     ef4:	1c c0       	rjmp	.+56     	; 0xf2e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
     ef6:	8a e2       	ldi	r24, 0x2A	; 42
     ef8:	8a 83       	std	Y+2, r24	; 0x02
     efa:	19 c0       	rjmp	.+50     	; 0xf2e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
     efc:	91 e0       	ldi	r25, 0x01	; 1
     efe:	9a 83       	std	Y+2, r25	; 0x02
     f00:	16 c0       	rjmp	.+44     	; 0xf2e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
     f02:	22 e0       	ldi	r18, 0x02	; 2
     f04:	2a 83       	std	Y+2, r18	; 0x02
     f06:	13 c0       	rjmp	.+38     	; 0xf2e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
     f08:	33 e0       	ldi	r19, 0x03	; 3
     f0a:	3a 83       	std	Y+2, r19	; 0x02
     f0c:	10 c0       	rjmp	.+32     	; 0xf2e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
     f0e:	8d e2       	ldi	r24, 0x2D	; 45
     f10:	8a 83       	std	Y+2, r24	; 0x02
     f12:	0d c0       	rjmp	.+26     	; 0xf2e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
     f14:	9d e0       	ldi	r25, 0x0D	; 13
     f16:	9a 83       	std	Y+2, r25	; 0x02
     f18:	0a c0       	rjmp	.+20     	; 0xf2e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
     f1a:	1a 82       	std	Y+2, r1	; 0x02
     f1c:	08 c0       	rjmp	.+16     	; 0xf2e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
     f1e:	2d e3       	ldi	r18, 0x3D	; 61
     f20:	2a 83       	std	Y+2, r18	; 0x02
     f22:	05 c0       	rjmp	.+10     	; 0xf2e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
     f24:	3b e2       	ldi	r19, 0x2B	; 43
     f26:	3a 83       	std	Y+2, r19	; 0x02
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	8a 83       	std	Y+2, r24	; 0x02
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
     f46:	e4 e3       	ldi	r30, 0x34	; 52
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	8f ef       	ldi	r24, 0xFF	; 255
     f4c:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
     f4e:	a7 e3       	ldi	r26, 0x37	; 55
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e7 e3       	ldi	r30, 0x37	; 55
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	8e 60       	ori	r24, 0x0E	; 14
     f5a:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
     f5c:	88 e3       	ldi	r24, 0x38	; 56
     f5e:	0e 94 ba 07 	call	0xf74	; 0xf74 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
     f62:	8c e0       	ldi	r24, 0x0C	; 12
     f64:	0e 94 ba 07 	call	0xf74	; 0xf74 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	0e 94 ba 07 	call	0xf74	; 0xf74 <LCD_sendCommand>
}
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	e9 97       	sbiw	r28, 0x39	; 57
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	cd bf       	out	0x3d, r28	; 61
     f88:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
     f8a:	a8 e3       	ldi	r26, 0x38	; 56
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e8 e3       	ldi	r30, 0x38	; 56
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	8d 7f       	andi	r24, 0xFD	; 253
     f96:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
     f98:	a8 e3       	ldi	r26, 0x38	; 56
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e8 e3       	ldi	r30, 0x38	; 56
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	8b 7f       	andi	r24, 0xFB	; 251
     fa4:	8c 93       	st	X, r24
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a0 e8       	ldi	r26, 0x80	; 128
     fac:	bf e3       	ldi	r27, 0x3F	; 63
     fae:	8d ab       	std	Y+53, r24	; 0x35
     fb0:	9e ab       	std	Y+54, r25	; 0x36
     fb2:	af ab       	std	Y+55, r26	; 0x37
     fb4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb6:	6d a9       	ldd	r22, Y+53	; 0x35
     fb8:	7e a9       	ldd	r23, Y+54	; 0x36
     fba:	8f a9       	ldd	r24, Y+55	; 0x37
     fbc:	98 ad       	ldd	r25, Y+56	; 0x38
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	4a ef       	ldi	r20, 0xFA	; 250
     fc4:	54 e4       	ldi	r21, 0x44	; 68
     fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	89 ab       	std	Y+49, r24	; 0x31
     fd0:	9a ab       	std	Y+50, r25	; 0x32
     fd2:	ab ab       	std	Y+51, r26	; 0x33
     fd4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     fd6:	69 a9       	ldd	r22, Y+49	; 0x31
     fd8:	7a a9       	ldd	r23, Y+50	; 0x32
     fda:	8b a9       	ldd	r24, Y+51	; 0x33
     fdc:	9c a9       	ldd	r25, Y+52	; 0x34
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e8       	ldi	r20, 0x80	; 128
     fe4:	5f e3       	ldi	r21, 0x3F	; 63
     fe6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fea:	88 23       	and	r24, r24
     fec:	2c f4       	brge	.+10     	; 0xff8 <LCD_sendCommand+0x84>
		__ticks = 1;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	98 ab       	std	Y+48, r25	; 0x30
     ff4:	8f a7       	std	Y+47, r24	; 0x2f
     ff6:	3f c0       	rjmp	.+126    	; 0x1076 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
     ff8:	69 a9       	ldd	r22, Y+49	; 0x31
     ffa:	7a a9       	ldd	r23, Y+50	; 0x32
     ffc:	8b a9       	ldd	r24, Y+51	; 0x33
     ffe:	9c a9       	ldd	r25, Y+52	; 0x34
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	3f ef       	ldi	r19, 0xFF	; 255
    1004:	4f e7       	ldi	r20, 0x7F	; 127
    1006:	57 e4       	ldi	r21, 0x47	; 71
    1008:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    100c:	18 16       	cp	r1, r24
    100e:	4c f5       	brge	.+82     	; 0x1062 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1010:	6d a9       	ldd	r22, Y+53	; 0x35
    1012:	7e a9       	ldd	r23, Y+54	; 0x36
    1014:	8f a9       	ldd	r24, Y+55	; 0x37
    1016:	98 ad       	ldd	r25, Y+56	; 0x38
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e2       	ldi	r20, 0x20	; 32
    101e:	51 e4       	ldi	r21, 0x41	; 65
    1020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	bc 01       	movw	r22, r24
    102a:	cd 01       	movw	r24, r26
    102c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	98 ab       	std	Y+48, r25	; 0x30
    1036:	8f a7       	std	Y+47, r24	; 0x2f
    1038:	0f c0       	rjmp	.+30     	; 0x1058 <LCD_sendCommand+0xe4>
    103a:	88 ec       	ldi	r24, 0xC8	; 200
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	9e a7       	std	Y+46, r25	; 0x2e
    1040:	8d a7       	std	Y+45, r24	; 0x2d
    1042:	8d a5       	ldd	r24, Y+45	; 0x2d
    1044:	9e a5       	ldd	r25, Y+46	; 0x2e
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	f1 f7       	brne	.-4      	; 0x1046 <LCD_sendCommand+0xd2>
    104a:	9e a7       	std	Y+46, r25	; 0x2e
    104c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1050:	98 a9       	ldd	r25, Y+48	; 0x30
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	98 ab       	std	Y+48, r25	; 0x30
    1056:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1058:	8f a5       	ldd	r24, Y+47	; 0x2f
    105a:	98 a9       	ldd	r25, Y+48	; 0x30
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	69 f7       	brne	.-38     	; 0x103a <LCD_sendCommand+0xc6>
    1060:	14 c0       	rjmp	.+40     	; 0x108a <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1062:	69 a9       	ldd	r22, Y+49	; 0x31
    1064:	7a a9       	ldd	r23, Y+50	; 0x32
    1066:	8b a9       	ldd	r24, Y+51	; 0x33
    1068:	9c a9       	ldd	r25, Y+52	; 0x34
    106a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	98 ab       	std	Y+48, r25	; 0x30
    1074:	8f a7       	std	Y+47, r24	; 0x2f
    1076:	8f a5       	ldd	r24, Y+47	; 0x2f
    1078:	98 a9       	ldd	r25, Y+48	; 0x30
    107a:	9c a7       	std	Y+44, r25	; 0x2c
    107c:	8b a7       	std	Y+43, r24	; 0x2b
    107e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1080:	9c a5       	ldd	r25, Y+44	; 0x2c
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	f1 f7       	brne	.-4      	; 0x1082 <LCD_sendCommand+0x10e>
    1086:	9c a7       	std	Y+44, r25	; 0x2c
    1088:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    108a:	a8 e3       	ldi	r26, 0x38	; 56
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e8 e3       	ldi	r30, 0x38	; 56
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	88 60       	ori	r24, 0x08	; 8
    1096:	8c 93       	st	X, r24
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	a0 e8       	ldi	r26, 0x80	; 128
    109e:	bf e3       	ldi	r27, 0x3F	; 63
    10a0:	8f a3       	std	Y+39, r24	; 0x27
    10a2:	98 a7       	std	Y+40, r25	; 0x28
    10a4:	a9 a7       	std	Y+41, r26	; 0x29
    10a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a8:	6f a1       	ldd	r22, Y+39	; 0x27
    10aa:	78 a5       	ldd	r23, Y+40	; 0x28
    10ac:	89 a5       	ldd	r24, Y+41	; 0x29
    10ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	4a ef       	ldi	r20, 0xFA	; 250
    10b6:	54 e4       	ldi	r21, 0x44	; 68
    10b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	8b a3       	std	Y+35, r24	; 0x23
    10c2:	9c a3       	std	Y+36, r25	; 0x24
    10c4:	ad a3       	std	Y+37, r26	; 0x25
    10c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10c8:	6b a1       	ldd	r22, Y+35	; 0x23
    10ca:	7c a1       	ldd	r23, Y+36	; 0x24
    10cc:	8d a1       	ldd	r24, Y+37	; 0x25
    10ce:	9e a1       	ldd	r25, Y+38	; 0x26
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e8       	ldi	r20, 0x80	; 128
    10d6:	5f e3       	ldi	r21, 0x3F	; 63
    10d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10dc:	88 23       	and	r24, r24
    10de:	2c f4       	brge	.+10     	; 0x10ea <LCD_sendCommand+0x176>
		__ticks = 1;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	9a a3       	std	Y+34, r25	; 0x22
    10e6:	89 a3       	std	Y+33, r24	; 0x21
    10e8:	3f c0       	rjmp	.+126    	; 0x1168 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    10ea:	6b a1       	ldd	r22, Y+35	; 0x23
    10ec:	7c a1       	ldd	r23, Y+36	; 0x24
    10ee:	8d a1       	ldd	r24, Y+37	; 0x25
    10f0:	9e a1       	ldd	r25, Y+38	; 0x26
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	3f ef       	ldi	r19, 0xFF	; 255
    10f6:	4f e7       	ldi	r20, 0x7F	; 127
    10f8:	57 e4       	ldi	r21, 0x47	; 71
    10fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10fe:	18 16       	cp	r1, r24
    1100:	4c f5       	brge	.+82     	; 0x1154 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1102:	6f a1       	ldd	r22, Y+39	; 0x27
    1104:	78 a5       	ldd	r23, Y+40	; 0x28
    1106:	89 a5       	ldd	r24, Y+41	; 0x29
    1108:	9a a5       	ldd	r25, Y+42	; 0x2a
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	40 e2       	ldi	r20, 0x20	; 32
    1110:	51 e4       	ldi	r21, 0x41	; 65
    1112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	bc 01       	movw	r22, r24
    111c:	cd 01       	movw	r24, r26
    111e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	9a a3       	std	Y+34, r25	; 0x22
    1128:	89 a3       	std	Y+33, r24	; 0x21
    112a:	0f c0       	rjmp	.+30     	; 0x114a <LCD_sendCommand+0x1d6>
    112c:	88 ec       	ldi	r24, 0xC8	; 200
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	98 a3       	std	Y+32, r25	; 0x20
    1132:	8f 8f       	std	Y+31, r24	; 0x1f
    1134:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1136:	98 a1       	ldd	r25, Y+32	; 0x20
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <LCD_sendCommand+0x1c4>
    113c:	98 a3       	std	Y+32, r25	; 0x20
    113e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1140:	89 a1       	ldd	r24, Y+33	; 0x21
    1142:	9a a1       	ldd	r25, Y+34	; 0x22
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	9a a3       	std	Y+34, r25	; 0x22
    1148:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    114a:	89 a1       	ldd	r24, Y+33	; 0x21
    114c:	9a a1       	ldd	r25, Y+34	; 0x22
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	69 f7       	brne	.-38     	; 0x112c <LCD_sendCommand+0x1b8>
    1152:	14 c0       	rjmp	.+40     	; 0x117c <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1154:	6b a1       	ldd	r22, Y+35	; 0x23
    1156:	7c a1       	ldd	r23, Y+36	; 0x24
    1158:	8d a1       	ldd	r24, Y+37	; 0x25
    115a:	9e a1       	ldd	r25, Y+38	; 0x26
    115c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	9a a3       	std	Y+34, r25	; 0x22
    1166:	89 a3       	std	Y+33, r24	; 0x21
    1168:	89 a1       	ldd	r24, Y+33	; 0x21
    116a:	9a a1       	ldd	r25, Y+34	; 0x22
    116c:	9e 8f       	std	Y+30, r25	; 0x1e
    116e:	8d 8f       	std	Y+29, r24	; 0x1d
    1170:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1172:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	f1 f7       	brne	.-4      	; 0x1174 <LCD_sendCommand+0x200>
    1178:	9e 8f       	std	Y+30, r25	; 0x1e
    117a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    117c:	e5 e3       	ldi	r30, 0x35	; 53
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	89 ad       	ldd	r24, Y+57	; 0x39
    1182:	80 83       	st	Z, r24
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	a0 e8       	ldi	r26, 0x80	; 128
    118a:	bf e3       	ldi	r27, 0x3F	; 63
    118c:	89 8f       	std	Y+25, r24	; 0x19
    118e:	9a 8f       	std	Y+26, r25	; 0x1a
    1190:	ab 8f       	std	Y+27, r26	; 0x1b
    1192:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1194:	69 8d       	ldd	r22, Y+25	; 0x19
    1196:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1198:	8b 8d       	ldd	r24, Y+27	; 0x1b
    119a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	4a ef       	ldi	r20, 0xFA	; 250
    11a2:	54 e4       	ldi	r21, 0x44	; 68
    11a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	8d 8b       	std	Y+21, r24	; 0x15
    11ae:	9e 8b       	std	Y+22, r25	; 0x16
    11b0:	af 8b       	std	Y+23, r26	; 0x17
    11b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11b4:	6d 89       	ldd	r22, Y+21	; 0x15
    11b6:	7e 89       	ldd	r23, Y+22	; 0x16
    11b8:	8f 89       	ldd	r24, Y+23	; 0x17
    11ba:	98 8d       	ldd	r25, Y+24	; 0x18
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e8       	ldi	r20, 0x80	; 128
    11c2:	5f e3       	ldi	r21, 0x3F	; 63
    11c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11c8:	88 23       	and	r24, r24
    11ca:	2c f4       	brge	.+10     	; 0x11d6 <LCD_sendCommand+0x262>
		__ticks = 1;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	9c 8b       	std	Y+20, r25	; 0x14
    11d2:	8b 8b       	std	Y+19, r24	; 0x13
    11d4:	3f c0       	rjmp	.+126    	; 0x1254 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    11d6:	6d 89       	ldd	r22, Y+21	; 0x15
    11d8:	7e 89       	ldd	r23, Y+22	; 0x16
    11da:	8f 89       	ldd	r24, Y+23	; 0x17
    11dc:	98 8d       	ldd	r25, Y+24	; 0x18
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	3f ef       	ldi	r19, 0xFF	; 255
    11e2:	4f e7       	ldi	r20, 0x7F	; 127
    11e4:	57 e4       	ldi	r21, 0x47	; 71
    11e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11ea:	18 16       	cp	r1, r24
    11ec:	4c f5       	brge	.+82     	; 0x1240 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ee:	69 8d       	ldd	r22, Y+25	; 0x19
    11f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	40 e2       	ldi	r20, 0x20	; 32
    11fc:	51 e4       	ldi	r21, 0x41	; 65
    11fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	bc 01       	movw	r22, r24
    1208:	cd 01       	movw	r24, r26
    120a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	9c 8b       	std	Y+20, r25	; 0x14
    1214:	8b 8b       	std	Y+19, r24	; 0x13
    1216:	0f c0       	rjmp	.+30     	; 0x1236 <LCD_sendCommand+0x2c2>
    1218:	88 ec       	ldi	r24, 0xC8	; 200
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	9a 8b       	std	Y+18, r25	; 0x12
    121e:	89 8b       	std	Y+17, r24	; 0x11
    1220:	89 89       	ldd	r24, Y+17	; 0x11
    1222:	9a 89       	ldd	r25, Y+18	; 0x12
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	f1 f7       	brne	.-4      	; 0x1224 <LCD_sendCommand+0x2b0>
    1228:	9a 8b       	std	Y+18, r25	; 0x12
    122a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122c:	8b 89       	ldd	r24, Y+19	; 0x13
    122e:	9c 89       	ldd	r25, Y+20	; 0x14
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	9c 8b       	std	Y+20, r25	; 0x14
    1234:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1236:	8b 89       	ldd	r24, Y+19	; 0x13
    1238:	9c 89       	ldd	r25, Y+20	; 0x14
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	69 f7       	brne	.-38     	; 0x1218 <LCD_sendCommand+0x2a4>
    123e:	14 c0       	rjmp	.+40     	; 0x1268 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1240:	6d 89       	ldd	r22, Y+21	; 0x15
    1242:	7e 89       	ldd	r23, Y+22	; 0x16
    1244:	8f 89       	ldd	r24, Y+23	; 0x17
    1246:	98 8d       	ldd	r25, Y+24	; 0x18
    1248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	9c 8b       	std	Y+20, r25	; 0x14
    1252:	8b 8b       	std	Y+19, r24	; 0x13
    1254:	8b 89       	ldd	r24, Y+19	; 0x13
    1256:	9c 89       	ldd	r25, Y+20	; 0x14
    1258:	98 8b       	std	Y+16, r25	; 0x10
    125a:	8f 87       	std	Y+15, r24	; 0x0f
    125c:	8f 85       	ldd	r24, Y+15	; 0x0f
    125e:	98 89       	ldd	r25, Y+16	; 0x10
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	f1 f7       	brne	.-4      	; 0x1260 <LCD_sendCommand+0x2ec>
    1264:	98 8b       	std	Y+16, r25	; 0x10
    1266:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1268:	a8 e3       	ldi	r26, 0x38	; 56
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e8 e3       	ldi	r30, 0x38	; 56
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	87 7f       	andi	r24, 0xF7	; 247
    1274:	8c 93       	st	X, r24
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	a0 e8       	ldi	r26, 0x80	; 128
    127c:	bf e3       	ldi	r27, 0x3F	; 63
    127e:	8b 87       	std	Y+11, r24	; 0x0b
    1280:	9c 87       	std	Y+12, r25	; 0x0c
    1282:	ad 87       	std	Y+13, r26	; 0x0d
    1284:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1286:	6b 85       	ldd	r22, Y+11	; 0x0b
    1288:	7c 85       	ldd	r23, Y+12	; 0x0c
    128a:	8d 85       	ldd	r24, Y+13	; 0x0d
    128c:	9e 85       	ldd	r25, Y+14	; 0x0e
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	4a ef       	ldi	r20, 0xFA	; 250
    1294:	54 e4       	ldi	r21, 0x44	; 68
    1296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	8f 83       	std	Y+7, r24	; 0x07
    12a0:	98 87       	std	Y+8, r25	; 0x08
    12a2:	a9 87       	std	Y+9, r26	; 0x09
    12a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12a6:	6f 81       	ldd	r22, Y+7	; 0x07
    12a8:	78 85       	ldd	r23, Y+8	; 0x08
    12aa:	89 85       	ldd	r24, Y+9	; 0x09
    12ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 e8       	ldi	r20, 0x80	; 128
    12b4:	5f e3       	ldi	r21, 0x3F	; 63
    12b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ba:	88 23       	and	r24, r24
    12bc:	2c f4       	brge	.+10     	; 0x12c8 <LCD_sendCommand+0x354>
		__ticks = 1;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	9e 83       	std	Y+6, r25	; 0x06
    12c4:	8d 83       	std	Y+5, r24	; 0x05
    12c6:	3f c0       	rjmp	.+126    	; 0x1346 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    12c8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ca:	78 85       	ldd	r23, Y+8	; 0x08
    12cc:	89 85       	ldd	r24, Y+9	; 0x09
    12ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	3f ef       	ldi	r19, 0xFF	; 255
    12d4:	4f e7       	ldi	r20, 0x7F	; 127
    12d6:	57 e4       	ldi	r21, 0x47	; 71
    12d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12dc:	18 16       	cp	r1, r24
    12de:	4c f5       	brge	.+82     	; 0x1332 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	40 e2       	ldi	r20, 0x20	; 32
    12ee:	51 e4       	ldi	r21, 0x41	; 65
    12f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	bc 01       	movw	r22, r24
    12fa:	cd 01       	movw	r24, r26
    12fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	9e 83       	std	Y+6, r25	; 0x06
    1306:	8d 83       	std	Y+5, r24	; 0x05
    1308:	0f c0       	rjmp	.+30     	; 0x1328 <LCD_sendCommand+0x3b4>
    130a:	88 ec       	ldi	r24, 0xC8	; 200
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	9c 83       	std	Y+4, r25	; 0x04
    1310:	8b 83       	std	Y+3, r24	; 0x03
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	9c 81       	ldd	r25, Y+4	; 0x04
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	f1 f7       	brne	.-4      	; 0x1316 <LCD_sendCommand+0x3a2>
    131a:	9c 83       	std	Y+4, r25	; 0x04
    131c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	9e 81       	ldd	r25, Y+6	; 0x06
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	9e 83       	std	Y+6, r25	; 0x06
    1326:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1328:	8d 81       	ldd	r24, Y+5	; 0x05
    132a:	9e 81       	ldd	r25, Y+6	; 0x06
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	69 f7       	brne	.-38     	; 0x130a <LCD_sendCommand+0x396>
    1330:	14 c0       	rjmp	.+40     	; 0x135a <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1332:	6f 81       	ldd	r22, Y+7	; 0x07
    1334:	78 85       	ldd	r23, Y+8	; 0x08
    1336:	89 85       	ldd	r24, Y+9	; 0x09
    1338:	9a 85       	ldd	r25, Y+10	; 0x0a
    133a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	9e 83       	std	Y+6, r25	; 0x06
    1344:	8d 83       	std	Y+5, r24	; 0x05
    1346:	8d 81       	ldd	r24, Y+5	; 0x05
    1348:	9e 81       	ldd	r25, Y+6	; 0x06
    134a:	9a 83       	std	Y+2, r25	; 0x02
    134c:	89 83       	std	Y+1, r24	; 0x01
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	9a 81       	ldd	r25, Y+2	; 0x02
    1352:	01 97       	sbiw	r24, 0x01	; 1
    1354:	f1 f7       	brne	.-4      	; 0x1352 <LCD_sendCommand+0x3de>
    1356:	9a 83       	std	Y+2, r25	; 0x02
    1358:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    135a:	e9 96       	adiw	r28, 0x39	; 57
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	e9 97       	sbiw	r28, 0x39	; 57
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1382:	a8 e3       	ldi	r26, 0x38	; 56
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e8 e3       	ldi	r30, 0x38	; 56
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	82 60       	ori	r24, 0x02	; 2
    138e:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1390:	a8 e3       	ldi	r26, 0x38	; 56
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e8 e3       	ldi	r30, 0x38	; 56
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	8b 7f       	andi	r24, 0xFB	; 251
    139c:	8c 93       	st	X, r24
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	a0 e8       	ldi	r26, 0x80	; 128
    13a4:	bf e3       	ldi	r27, 0x3F	; 63
    13a6:	8d ab       	std	Y+53, r24	; 0x35
    13a8:	9e ab       	std	Y+54, r25	; 0x36
    13aa:	af ab       	std	Y+55, r26	; 0x37
    13ac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ae:	6d a9       	ldd	r22, Y+53	; 0x35
    13b0:	7e a9       	ldd	r23, Y+54	; 0x36
    13b2:	8f a9       	ldd	r24, Y+55	; 0x37
    13b4:	98 ad       	ldd	r25, Y+56	; 0x38
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	4a ef       	ldi	r20, 0xFA	; 250
    13bc:	54 e4       	ldi	r21, 0x44	; 68
    13be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	89 ab       	std	Y+49, r24	; 0x31
    13c8:	9a ab       	std	Y+50, r25	; 0x32
    13ca:	ab ab       	std	Y+51, r26	; 0x33
    13cc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13ce:	69 a9       	ldd	r22, Y+49	; 0x31
    13d0:	7a a9       	ldd	r23, Y+50	; 0x32
    13d2:	8b a9       	ldd	r24, Y+51	; 0x33
    13d4:	9c a9       	ldd	r25, Y+52	; 0x34
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	40 e8       	ldi	r20, 0x80	; 128
    13dc:	5f e3       	ldi	r21, 0x3F	; 63
    13de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13e2:	88 23       	and	r24, r24
    13e4:	2c f4       	brge	.+10     	; 0x13f0 <LCD_displayCharacter+0x84>
		__ticks = 1;
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	98 ab       	std	Y+48, r25	; 0x30
    13ec:	8f a7       	std	Y+47, r24	; 0x2f
    13ee:	3f c0       	rjmp	.+126    	; 0x146e <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    13f0:	69 a9       	ldd	r22, Y+49	; 0x31
    13f2:	7a a9       	ldd	r23, Y+50	; 0x32
    13f4:	8b a9       	ldd	r24, Y+51	; 0x33
    13f6:	9c a9       	ldd	r25, Y+52	; 0x34
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	3f ef       	ldi	r19, 0xFF	; 255
    13fc:	4f e7       	ldi	r20, 0x7F	; 127
    13fe:	57 e4       	ldi	r21, 0x47	; 71
    1400:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1404:	18 16       	cp	r1, r24
    1406:	4c f5       	brge	.+82     	; 0x145a <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1408:	6d a9       	ldd	r22, Y+53	; 0x35
    140a:	7e a9       	ldd	r23, Y+54	; 0x36
    140c:	8f a9       	ldd	r24, Y+55	; 0x37
    140e:	98 ad       	ldd	r25, Y+56	; 0x38
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	40 e2       	ldi	r20, 0x20	; 32
    1416:	51 e4       	ldi	r21, 0x41	; 65
    1418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	bc 01       	movw	r22, r24
    1422:	cd 01       	movw	r24, r26
    1424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	98 ab       	std	Y+48, r25	; 0x30
    142e:	8f a7       	std	Y+47, r24	; 0x2f
    1430:	0f c0       	rjmp	.+30     	; 0x1450 <LCD_displayCharacter+0xe4>
    1432:	88 ec       	ldi	r24, 0xC8	; 200
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	9e a7       	std	Y+46, r25	; 0x2e
    1438:	8d a7       	std	Y+45, r24	; 0x2d
    143a:	8d a5       	ldd	r24, Y+45	; 0x2d
    143c:	9e a5       	ldd	r25, Y+46	; 0x2e
    143e:	01 97       	sbiw	r24, 0x01	; 1
    1440:	f1 f7       	brne	.-4      	; 0x143e <LCD_displayCharacter+0xd2>
    1442:	9e a7       	std	Y+46, r25	; 0x2e
    1444:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1446:	8f a5       	ldd	r24, Y+47	; 0x2f
    1448:	98 a9       	ldd	r25, Y+48	; 0x30
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	98 ab       	std	Y+48, r25	; 0x30
    144e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1450:	8f a5       	ldd	r24, Y+47	; 0x2f
    1452:	98 a9       	ldd	r25, Y+48	; 0x30
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	69 f7       	brne	.-38     	; 0x1432 <LCD_displayCharacter+0xc6>
    1458:	14 c0       	rjmp	.+40     	; 0x1482 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    145a:	69 a9       	ldd	r22, Y+49	; 0x31
    145c:	7a a9       	ldd	r23, Y+50	; 0x32
    145e:	8b a9       	ldd	r24, Y+51	; 0x33
    1460:	9c a9       	ldd	r25, Y+52	; 0x34
    1462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	98 ab       	std	Y+48, r25	; 0x30
    146c:	8f a7       	std	Y+47, r24	; 0x2f
    146e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1470:	98 a9       	ldd	r25, Y+48	; 0x30
    1472:	9c a7       	std	Y+44, r25	; 0x2c
    1474:	8b a7       	std	Y+43, r24	; 0x2b
    1476:	8b a5       	ldd	r24, Y+43	; 0x2b
    1478:	9c a5       	ldd	r25, Y+44	; 0x2c
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	f1 f7       	brne	.-4      	; 0x147a <LCD_displayCharacter+0x10e>
    147e:	9c a7       	std	Y+44, r25	; 0x2c
    1480:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1482:	a8 e3       	ldi	r26, 0x38	; 56
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e8 e3       	ldi	r30, 0x38	; 56
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	88 60       	ori	r24, 0x08	; 8
    148e:	8c 93       	st	X, r24
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	a0 e8       	ldi	r26, 0x80	; 128
    1496:	bf e3       	ldi	r27, 0x3F	; 63
    1498:	8f a3       	std	Y+39, r24	; 0x27
    149a:	98 a7       	std	Y+40, r25	; 0x28
    149c:	a9 a7       	std	Y+41, r26	; 0x29
    149e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a0:	6f a1       	ldd	r22, Y+39	; 0x27
    14a2:	78 a5       	ldd	r23, Y+40	; 0x28
    14a4:	89 a5       	ldd	r24, Y+41	; 0x29
    14a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	4a ef       	ldi	r20, 0xFA	; 250
    14ae:	54 e4       	ldi	r21, 0x44	; 68
    14b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	8b a3       	std	Y+35, r24	; 0x23
    14ba:	9c a3       	std	Y+36, r25	; 0x24
    14bc:	ad a3       	std	Y+37, r26	; 0x25
    14be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14c0:	6b a1       	ldd	r22, Y+35	; 0x23
    14c2:	7c a1       	ldd	r23, Y+36	; 0x24
    14c4:	8d a1       	ldd	r24, Y+37	; 0x25
    14c6:	9e a1       	ldd	r25, Y+38	; 0x26
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	40 e8       	ldi	r20, 0x80	; 128
    14ce:	5f e3       	ldi	r21, 0x3F	; 63
    14d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14d4:	88 23       	and	r24, r24
    14d6:	2c f4       	brge	.+10     	; 0x14e2 <LCD_displayCharacter+0x176>
		__ticks = 1;
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	9a a3       	std	Y+34, r25	; 0x22
    14de:	89 a3       	std	Y+33, r24	; 0x21
    14e0:	3f c0       	rjmp	.+126    	; 0x1560 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    14e2:	6b a1       	ldd	r22, Y+35	; 0x23
    14e4:	7c a1       	ldd	r23, Y+36	; 0x24
    14e6:	8d a1       	ldd	r24, Y+37	; 0x25
    14e8:	9e a1       	ldd	r25, Y+38	; 0x26
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	3f ef       	ldi	r19, 0xFF	; 255
    14ee:	4f e7       	ldi	r20, 0x7F	; 127
    14f0:	57 e4       	ldi	r21, 0x47	; 71
    14f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14f6:	18 16       	cp	r1, r24
    14f8:	4c f5       	brge	.+82     	; 0x154c <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14fa:	6f a1       	ldd	r22, Y+39	; 0x27
    14fc:	78 a5       	ldd	r23, Y+40	; 0x28
    14fe:	89 a5       	ldd	r24, Y+41	; 0x29
    1500:	9a a5       	ldd	r25, Y+42	; 0x2a
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e2       	ldi	r20, 0x20	; 32
    1508:	51 e4       	ldi	r21, 0x41	; 65
    150a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150e:	dc 01       	movw	r26, r24
    1510:	cb 01       	movw	r24, r22
    1512:	bc 01       	movw	r22, r24
    1514:	cd 01       	movw	r24, r26
    1516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	9a a3       	std	Y+34, r25	; 0x22
    1520:	89 a3       	std	Y+33, r24	; 0x21
    1522:	0f c0       	rjmp	.+30     	; 0x1542 <LCD_displayCharacter+0x1d6>
    1524:	88 ec       	ldi	r24, 0xC8	; 200
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	98 a3       	std	Y+32, r25	; 0x20
    152a:	8f 8f       	std	Y+31, r24	; 0x1f
    152c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    152e:	98 a1       	ldd	r25, Y+32	; 0x20
    1530:	01 97       	sbiw	r24, 0x01	; 1
    1532:	f1 f7       	brne	.-4      	; 0x1530 <LCD_displayCharacter+0x1c4>
    1534:	98 a3       	std	Y+32, r25	; 0x20
    1536:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1538:	89 a1       	ldd	r24, Y+33	; 0x21
    153a:	9a a1       	ldd	r25, Y+34	; 0x22
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	9a a3       	std	Y+34, r25	; 0x22
    1540:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1542:	89 a1       	ldd	r24, Y+33	; 0x21
    1544:	9a a1       	ldd	r25, Y+34	; 0x22
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	69 f7       	brne	.-38     	; 0x1524 <LCD_displayCharacter+0x1b8>
    154a:	14 c0       	rjmp	.+40     	; 0x1574 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    154c:	6b a1       	ldd	r22, Y+35	; 0x23
    154e:	7c a1       	ldd	r23, Y+36	; 0x24
    1550:	8d a1       	ldd	r24, Y+37	; 0x25
    1552:	9e a1       	ldd	r25, Y+38	; 0x26
    1554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	9a a3       	std	Y+34, r25	; 0x22
    155e:	89 a3       	std	Y+33, r24	; 0x21
    1560:	89 a1       	ldd	r24, Y+33	; 0x21
    1562:	9a a1       	ldd	r25, Y+34	; 0x22
    1564:	9e 8f       	std	Y+30, r25	; 0x1e
    1566:	8d 8f       	std	Y+29, r24	; 0x1d
    1568:	8d 8d       	ldd	r24, Y+29	; 0x1d
    156a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	f1 f7       	brne	.-4      	; 0x156c <LCD_displayCharacter+0x200>
    1570:	9e 8f       	std	Y+30, r25	; 0x1e
    1572:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    1574:	e5 e3       	ldi	r30, 0x35	; 53
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	89 ad       	ldd	r24, Y+57	; 0x39
    157a:	80 83       	st	Z, r24
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	a0 e8       	ldi	r26, 0x80	; 128
    1582:	bf e3       	ldi	r27, 0x3F	; 63
    1584:	89 8f       	std	Y+25, r24	; 0x19
    1586:	9a 8f       	std	Y+26, r25	; 0x1a
    1588:	ab 8f       	std	Y+27, r26	; 0x1b
    158a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158c:	69 8d       	ldd	r22, Y+25	; 0x19
    158e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1590:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1592:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	4a ef       	ldi	r20, 0xFA	; 250
    159a:	54 e4       	ldi	r21, 0x44	; 68
    159c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	8d 8b       	std	Y+21, r24	; 0x15
    15a6:	9e 8b       	std	Y+22, r25	; 0x16
    15a8:	af 8b       	std	Y+23, r26	; 0x17
    15aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15ac:	6d 89       	ldd	r22, Y+21	; 0x15
    15ae:	7e 89       	ldd	r23, Y+22	; 0x16
    15b0:	8f 89       	ldd	r24, Y+23	; 0x17
    15b2:	98 8d       	ldd	r25, Y+24	; 0x18
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	40 e8       	ldi	r20, 0x80	; 128
    15ba:	5f e3       	ldi	r21, 0x3F	; 63
    15bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15c0:	88 23       	and	r24, r24
    15c2:	2c f4       	brge	.+10     	; 0x15ce <LCD_displayCharacter+0x262>
		__ticks = 1;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	9c 8b       	std	Y+20, r25	; 0x14
    15ca:	8b 8b       	std	Y+19, r24	; 0x13
    15cc:	3f c0       	rjmp	.+126    	; 0x164c <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    15ce:	6d 89       	ldd	r22, Y+21	; 0x15
    15d0:	7e 89       	ldd	r23, Y+22	; 0x16
    15d2:	8f 89       	ldd	r24, Y+23	; 0x17
    15d4:	98 8d       	ldd	r25, Y+24	; 0x18
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	3f ef       	ldi	r19, 0xFF	; 255
    15da:	4f e7       	ldi	r20, 0x7F	; 127
    15dc:	57 e4       	ldi	r21, 0x47	; 71
    15de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15e2:	18 16       	cp	r1, r24
    15e4:	4c f5       	brge	.+82     	; 0x1638 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e6:	69 8d       	ldd	r22, Y+25	; 0x19
    15e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e2       	ldi	r20, 0x20	; 32
    15f4:	51 e4       	ldi	r21, 0x41	; 65
    15f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	bc 01       	movw	r22, r24
    1600:	cd 01       	movw	r24, r26
    1602:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	9c 8b       	std	Y+20, r25	; 0x14
    160c:	8b 8b       	std	Y+19, r24	; 0x13
    160e:	0f c0       	rjmp	.+30     	; 0x162e <LCD_displayCharacter+0x2c2>
    1610:	88 ec       	ldi	r24, 0xC8	; 200
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	9a 8b       	std	Y+18, r25	; 0x12
    1616:	89 8b       	std	Y+17, r24	; 0x11
    1618:	89 89       	ldd	r24, Y+17	; 0x11
    161a:	9a 89       	ldd	r25, Y+18	; 0x12
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	f1 f7       	brne	.-4      	; 0x161c <LCD_displayCharacter+0x2b0>
    1620:	9a 8b       	std	Y+18, r25	; 0x12
    1622:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1624:	8b 89       	ldd	r24, Y+19	; 0x13
    1626:	9c 89       	ldd	r25, Y+20	; 0x14
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	9c 8b       	std	Y+20, r25	; 0x14
    162c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162e:	8b 89       	ldd	r24, Y+19	; 0x13
    1630:	9c 89       	ldd	r25, Y+20	; 0x14
    1632:	00 97       	sbiw	r24, 0x00	; 0
    1634:	69 f7       	brne	.-38     	; 0x1610 <LCD_displayCharacter+0x2a4>
    1636:	14 c0       	rjmp	.+40     	; 0x1660 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1638:	6d 89       	ldd	r22, Y+21	; 0x15
    163a:	7e 89       	ldd	r23, Y+22	; 0x16
    163c:	8f 89       	ldd	r24, Y+23	; 0x17
    163e:	98 8d       	ldd	r25, Y+24	; 0x18
    1640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	9c 8b       	std	Y+20, r25	; 0x14
    164a:	8b 8b       	std	Y+19, r24	; 0x13
    164c:	8b 89       	ldd	r24, Y+19	; 0x13
    164e:	9c 89       	ldd	r25, Y+20	; 0x14
    1650:	98 8b       	std	Y+16, r25	; 0x10
    1652:	8f 87       	std	Y+15, r24	; 0x0f
    1654:	8f 85       	ldd	r24, Y+15	; 0x0f
    1656:	98 89       	ldd	r25, Y+16	; 0x10
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	f1 f7       	brne	.-4      	; 0x1658 <LCD_displayCharacter+0x2ec>
    165c:	98 8b       	std	Y+16, r25	; 0x10
    165e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1660:	a8 e3       	ldi	r26, 0x38	; 56
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e8 e3       	ldi	r30, 0x38	; 56
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	87 7f       	andi	r24, 0xF7	; 247
    166c:	8c 93       	st	X, r24
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	a0 e8       	ldi	r26, 0x80	; 128
    1674:	bf e3       	ldi	r27, 0x3F	; 63
    1676:	8b 87       	std	Y+11, r24	; 0x0b
    1678:	9c 87       	std	Y+12, r25	; 0x0c
    167a:	ad 87       	std	Y+13, r26	; 0x0d
    167c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1680:	7c 85       	ldd	r23, Y+12	; 0x0c
    1682:	8d 85       	ldd	r24, Y+13	; 0x0d
    1684:	9e 85       	ldd	r25, Y+14	; 0x0e
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	4a ef       	ldi	r20, 0xFA	; 250
    168c:	54 e4       	ldi	r21, 0x44	; 68
    168e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	8f 83       	std	Y+7, r24	; 0x07
    1698:	98 87       	std	Y+8, r25	; 0x08
    169a:	a9 87       	std	Y+9, r26	; 0x09
    169c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    169e:	6f 81       	ldd	r22, Y+7	; 0x07
    16a0:	78 85       	ldd	r23, Y+8	; 0x08
    16a2:	89 85       	ldd	r24, Y+9	; 0x09
    16a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	40 e8       	ldi	r20, 0x80	; 128
    16ac:	5f e3       	ldi	r21, 0x3F	; 63
    16ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16b2:	88 23       	and	r24, r24
    16b4:	2c f4       	brge	.+10     	; 0x16c0 <LCD_displayCharacter+0x354>
		__ticks = 1;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	9e 83       	std	Y+6, r25	; 0x06
    16bc:	8d 83       	std	Y+5, r24	; 0x05
    16be:	3f c0       	rjmp	.+126    	; 0x173e <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    16c0:	6f 81       	ldd	r22, Y+7	; 0x07
    16c2:	78 85       	ldd	r23, Y+8	; 0x08
    16c4:	89 85       	ldd	r24, Y+9	; 0x09
    16c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	3f ef       	ldi	r19, 0xFF	; 255
    16cc:	4f e7       	ldi	r20, 0x7F	; 127
    16ce:	57 e4       	ldi	r21, 0x47	; 71
    16d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16d4:	18 16       	cp	r1, r24
    16d6:	4c f5       	brge	.+82     	; 0x172a <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16da:	7c 85       	ldd	r23, Y+12	; 0x0c
    16dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    16de:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e2       	ldi	r20, 0x20	; 32
    16e6:	51 e4       	ldi	r21, 0x41	; 65
    16e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	bc 01       	movw	r22, r24
    16f2:	cd 01       	movw	r24, r26
    16f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	9e 83       	std	Y+6, r25	; 0x06
    16fe:	8d 83       	std	Y+5, r24	; 0x05
    1700:	0f c0       	rjmp	.+30     	; 0x1720 <LCD_displayCharacter+0x3b4>
    1702:	88 ec       	ldi	r24, 0xC8	; 200
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	9c 83       	std	Y+4, r25	; 0x04
    1708:	8b 83       	std	Y+3, r24	; 0x03
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	9c 81       	ldd	r25, Y+4	; 0x04
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	f1 f7       	brne	.-4      	; 0x170e <LCD_displayCharacter+0x3a2>
    1712:	9c 83       	std	Y+4, r25	; 0x04
    1714:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1716:	8d 81       	ldd	r24, Y+5	; 0x05
    1718:	9e 81       	ldd	r25, Y+6	; 0x06
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	9e 83       	std	Y+6, r25	; 0x06
    171e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1720:	8d 81       	ldd	r24, Y+5	; 0x05
    1722:	9e 81       	ldd	r25, Y+6	; 0x06
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	69 f7       	brne	.-38     	; 0x1702 <LCD_displayCharacter+0x396>
    1728:	14 c0       	rjmp	.+40     	; 0x1752 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172a:	6f 81       	ldd	r22, Y+7	; 0x07
    172c:	78 85       	ldd	r23, Y+8	; 0x08
    172e:	89 85       	ldd	r24, Y+9	; 0x09
    1730:	9a 85       	ldd	r25, Y+10	; 0x0a
    1732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	9e 83       	std	Y+6, r25	; 0x06
    173c:	8d 83       	std	Y+5, r24	; 0x05
    173e:	8d 81       	ldd	r24, Y+5	; 0x05
    1740:	9e 81       	ldd	r25, Y+6	; 0x06
    1742:	9a 83       	std	Y+2, r25	; 0x02
    1744:	89 83       	std	Y+1, r24	; 0x01
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	9a 81       	ldd	r25, Y+2	; 0x02
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	f1 f7       	brne	.-4      	; 0x174a <LCD_displayCharacter+0x3de>
    174e:	9a 83       	std	Y+2, r25	; 0x02
    1750:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    1752:	e9 96       	adiw	r28, 0x39	; 57
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	f8 94       	cli
    1758:	de bf       	out	0x3e, r29	; 62
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	cd bf       	out	0x3d, r28	; 61
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	00 d0       	rcall	.+0      	; 0x176a <LCD_displayString+0x6>
    176a:	0f 92       	push	r0
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	9b 83       	std	Y+3, r25	; 0x03
    1772:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1774:	19 82       	std	Y+1, r1	; 0x01
    1776:	0e c0       	rjmp	.+28     	; 0x1794 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	9b 81       	ldd	r25, Y+3	; 0x03
    1782:	fc 01       	movw	r30, r24
    1784:	e2 0f       	add	r30, r18
    1786:	f3 1f       	adc	r31, r19
    1788:	80 81       	ld	r24, Z
    178a:	0e 94 b6 09 	call	0x136c	; 0x136c <LCD_displayCharacter>
		i++;
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	8f 5f       	subi	r24, 0xFF	; 255
    1792:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	9b 81       	ldd	r25, Y+3	; 0x03
    179e:	fc 01       	movw	r30, r24
    17a0:	e2 0f       	add	r30, r18
    17a2:	f3 1f       	adc	r31, r19
    17a4:	80 81       	ld	r24, Z
    17a6:	88 23       	and	r24, r24
    17a8:	39 f7       	brne	.-50     	; 0x1778 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <LCD_goToRowColumn+0x6>
    17bc:	00 d0       	rcall	.+0      	; 0x17be <LCD_goToRowColumn+0x8>
    17be:	0f 92       	push	r0
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	8a 83       	std	Y+2, r24	; 0x02
    17c6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	3d 83       	std	Y+5, r19	; 0x05
    17d0:	2c 83       	std	Y+4, r18	; 0x04
    17d2:	8c 81       	ldd	r24, Y+4	; 0x04
    17d4:	9d 81       	ldd	r25, Y+5	; 0x05
    17d6:	81 30       	cpi	r24, 0x01	; 1
    17d8:	91 05       	cpc	r25, r1
    17da:	c1 f0       	breq	.+48     	; 0x180c <LCD_goToRowColumn+0x56>
    17dc:	2c 81       	ldd	r18, Y+4	; 0x04
    17de:	3d 81       	ldd	r19, Y+5	; 0x05
    17e0:	22 30       	cpi	r18, 0x02	; 2
    17e2:	31 05       	cpc	r19, r1
    17e4:	2c f4       	brge	.+10     	; 0x17f0 <LCD_goToRowColumn+0x3a>
    17e6:	8c 81       	ldd	r24, Y+4	; 0x04
    17e8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	61 f0       	breq	.+24     	; 0x1806 <LCD_goToRowColumn+0x50>
    17ee:	19 c0       	rjmp	.+50     	; 0x1822 <LCD_goToRowColumn+0x6c>
    17f0:	2c 81       	ldd	r18, Y+4	; 0x04
    17f2:	3d 81       	ldd	r19, Y+5	; 0x05
    17f4:	22 30       	cpi	r18, 0x02	; 2
    17f6:	31 05       	cpc	r19, r1
    17f8:	69 f0       	breq	.+26     	; 0x1814 <LCD_goToRowColumn+0x5e>
    17fa:	8c 81       	ldd	r24, Y+4	; 0x04
    17fc:	9d 81       	ldd	r25, Y+5	; 0x05
    17fe:	83 30       	cpi	r24, 0x03	; 3
    1800:	91 05       	cpc	r25, r1
    1802:	61 f0       	breq	.+24     	; 0x181c <LCD_goToRowColumn+0x66>
    1804:	0e c0       	rjmp	.+28     	; 0x1822 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	89 83       	std	Y+1, r24	; 0x01
    180a:	0b c0       	rjmp	.+22     	; 0x1822 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	80 5c       	subi	r24, 0xC0	; 192
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	07 c0       	rjmp	.+14     	; 0x1822 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	80 5f       	subi	r24, 0xF0	; 240
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	03 c0       	rjmp	.+6      	; 0x1822 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	80 5b       	subi	r24, 0xB0	; 176
    1820:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	80 68       	ori	r24, 0x80	; 128
    1826:	0e 94 ba 07 	call	0xf74	; 0xf74 <LCD_sendCommand>
}
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	08 95       	ret

0000183a <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	00 d0       	rcall	.+0      	; 0x1840 <LCD_displayStringRowColumn+0x6>
    1840:	00 d0       	rcall	.+0      	; 0x1842 <LCD_displayStringRowColumn+0x8>
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
    1846:	89 83       	std	Y+1, r24	; 0x01
    1848:	6a 83       	std	Y+2, r22	; 0x02
    184a:	5c 83       	std	Y+4, r21	; 0x04
    184c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	6a 81       	ldd	r22, Y+2	; 0x02
    1852:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	9c 81       	ldd	r25, Y+4	; 0x04
    185a:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCD_displayString>
}
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	62 97       	sbiw	r28, 0x12	; 18
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	9a 8b       	std	Y+18, r25	; 0x12
    1882:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1884:	89 89       	ldd	r24, Y+17	; 0x11
    1886:	9a 89       	ldd	r25, Y+18	; 0x12
    1888:	9e 01       	movw	r18, r28
    188a:	2f 5f       	subi	r18, 0xFF	; 255
    188c:	3f 4f       	sbci	r19, 0xFF	; 255
    188e:	b9 01       	movw	r22, r18
    1890:	4a e0       	ldi	r20, 0x0A	; 10
    1892:	50 e0       	ldi	r21, 0x00	; 0
    1894:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <itoa>
   LCD_displayString(buff);
    1898:	ce 01       	movw	r24, r28
    189a:	01 96       	adiw	r24, 0x01	; 1
    189c:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCD_displayString>
}
    18a0:	62 96       	adiw	r28, 0x12	; 18
    18a2:	0f b6       	in	r0, 0x3f	; 63
    18a4:	f8 94       	cli
    18a6:	de bf       	out	0x3e, r29	; 62
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	cd bf       	out	0x3d, r28	; 61
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	08 95       	ret

000018b2 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	0e 94 ba 07 	call	0xf74	; 0xf74 <LCD_sendCommand>
}
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <main>:
#define MATCHING 0x20
#define DISMATCHING 0x30
#define THEIF 0x40

int main(void)
{
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	c4 56       	subi	r28, 0x64	; 100
    18d0:	d0 40       	sbci	r29, 0x00	; 0
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	f8 94       	cli
    18d6:	de bf       	out	0x3e, r29	; 62
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    18dc:	0e 94 9f 07 	call	0xf3e	; 0xf3e <LCD_init>
	UART_config config = {BIT_8, DISABLE, STOP_BIT_1};  // 8_bit frame, parity disabled, 1 stop bit
    18e0:	ce 01       	movw	r24, r28
    18e2:	c5 96       	adiw	r24, 0x35	; 53
    18e4:	63 96       	adiw	r28, 0x13	; 19
    18e6:	9f af       	std	Y+63, r25	; 0x3f
    18e8:	8e af       	std	Y+62, r24	; 0x3e
    18ea:	63 97       	sbiw	r28, 0x13	; 19
    18ec:	e6 ef       	ldi	r30, 0xF6	; 246
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	65 96       	adiw	r28, 0x15	; 21
    18f2:	ff af       	std	Y+63, r31	; 0x3f
    18f4:	ee af       	std	Y+62, r30	; 0x3e
    18f6:	65 97       	sbiw	r28, 0x15	; 21
    18f8:	f3 e0       	ldi	r31, 0x03	; 3
    18fa:	66 96       	adiw	r28, 0x16	; 22
    18fc:	ff af       	std	Y+63, r31	; 0x3f
    18fe:	66 97       	sbiw	r28, 0x16	; 22
    1900:	65 96       	adiw	r28, 0x15	; 21
    1902:	ee ad       	ldd	r30, Y+62	; 0x3e
    1904:	ff ad       	ldd	r31, Y+63	; 0x3f
    1906:	65 97       	sbiw	r28, 0x15	; 21
    1908:	00 80       	ld	r0, Z
    190a:	65 96       	adiw	r28, 0x15	; 21
    190c:	8e ad       	ldd	r24, Y+62	; 0x3e
    190e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1910:	65 97       	sbiw	r28, 0x15	; 21
    1912:	01 96       	adiw	r24, 0x01	; 1
    1914:	65 96       	adiw	r28, 0x15	; 21
    1916:	9f af       	std	Y+63, r25	; 0x3f
    1918:	8e af       	std	Y+62, r24	; 0x3e
    191a:	65 97       	sbiw	r28, 0x15	; 21
    191c:	63 96       	adiw	r28, 0x13	; 19
    191e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1920:	ff ad       	ldd	r31, Y+63	; 0x3f
    1922:	63 97       	sbiw	r28, 0x13	; 19
    1924:	00 82       	st	Z, r0
    1926:	63 96       	adiw	r28, 0x13	; 19
    1928:	8e ad       	ldd	r24, Y+62	; 0x3e
    192a:	9f ad       	ldd	r25, Y+63	; 0x3f
    192c:	63 97       	sbiw	r28, 0x13	; 19
    192e:	01 96       	adiw	r24, 0x01	; 1
    1930:	63 96       	adiw	r28, 0x13	; 19
    1932:	9f af       	std	Y+63, r25	; 0x3f
    1934:	8e af       	std	Y+62, r24	; 0x3e
    1936:	63 97       	sbiw	r28, 0x13	; 19
    1938:	66 96       	adiw	r28, 0x16	; 22
    193a:	9f ad       	ldd	r25, Y+63	; 0x3f
    193c:	66 97       	sbiw	r28, 0x16	; 22
    193e:	91 50       	subi	r25, 0x01	; 1
    1940:	66 96       	adiw	r28, 0x16	; 22
    1942:	9f af       	std	Y+63, r25	; 0x3f
    1944:	66 97       	sbiw	r28, 0x16	; 22
    1946:	66 96       	adiw	r28, 0x16	; 22
    1948:	ef ad       	ldd	r30, Y+63	; 0x3f
    194a:	66 97       	sbiw	r28, 0x16	; 22
    194c:	ee 23       	and	r30, r30
    194e:	c1 f6       	brne	.-80     	; 0x1900 <main+0x3a>
	uart_init(&config);
    1950:	ce 01       	movw	r24, r28
    1952:	c5 96       	adiw	r24, 0x35	; 53
    1954:	0e 94 a2 10 	call	0x2144	; 0x2144 <uart_init>
	uint8 re_new_password[5];

	/* step(1) "enter new password, re_enter the new password, and check whether they are matching or not" */
	do
	{
		LCD_displayString("enter new pass: ");
    1958:	80 e6       	ldi	r24, 0x60	; 96
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCD_displayString>
		get_password(new_password);
    1960:	ce 01       	movw	r24, r28
    1962:	c8 96       	adiw	r24, 0x38	; 56
    1964:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_password>
		LCD_displayString("re_enter new pass: ");
    1968:	81 e7       	ldi	r24, 0x71	; 113
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCD_displayString>
		get_password(re_new_password);
    1970:	ce 01       	movw	r24, r28
    1972:	cd 96       	adiw	r24, 0x3d	; 61
    1974:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_password>
		compare = cmp (new_password, re_new_password);
    1978:	ce 01       	movw	r24, r28
    197a:	c8 96       	adiw	r24, 0x38	; 56
    197c:	9e 01       	movw	r18, r28
    197e:	23 5c       	subi	r18, 0xC3	; 195
    1980:	3f 4f       	sbci	r19, 0xFF	; 255
    1982:	b9 01       	movw	r22, r18
    1984:	0e 94 4f 06 	call	0xc9e	; 0xc9e <cmp>
    1988:	8c ab       	std	Y+52, r24	; 0x34
	}
	while (!compare);
    198a:	8c a9       	ldd	r24, Y+52	; 0x34
    198c:	88 23       	and	r24, r24
    198e:	21 f3       	breq	.-56     	; 0x1958 <main+0x92>

	/* send the new password using UART to the MC2 */
	uart_sendByte(READY);
    1990:	80 e1       	ldi	r24, 0x10	; 16
    1992:	0e 94 18 11 	call	0x2230	; 0x2230 <uart_sendByte>
	for (uint8 i = 0; i < 5; i++)
    1996:	1b aa       	std	Y+51, r1	; 0x33
    1998:	12 c0       	rjmp	.+36     	; 0x19be <main+0xf8>
	{
		while (uart_recieveByte() != READY){};
    199a:	0e 94 2f 11 	call	0x225e	; 0x225e <uart_recieveByte>
    199e:	80 31       	cpi	r24, 0x10	; 16
    19a0:	e1 f7       	brne	.-8      	; 0x199a <main+0xd4>
		uart_sendByte(new_password[i]);
    19a2:	8b a9       	ldd	r24, Y+51	; 0x33
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	ce 01       	movw	r24, r28
    19aa:	c8 96       	adiw	r24, 0x38	; 56
    19ac:	fc 01       	movw	r30, r24
    19ae:	e2 0f       	add	r30, r18
    19b0:	f3 1f       	adc	r31, r19
    19b2:	80 81       	ld	r24, Z
    19b4:	0e 94 18 11 	call	0x2230	; 0x2230 <uart_sendByte>
	}
	while (!compare);

	/* send the new password using UART to the MC2 */
	uart_sendByte(READY);
	for (uint8 i = 0; i < 5; i++)
    19b8:	8b a9       	ldd	r24, Y+51	; 0x33
    19ba:	8f 5f       	subi	r24, 0xFF	; 255
    19bc:	8b ab       	std	Y+51, r24	; 0x33
    19be:	8b a9       	ldd	r24, Y+51	; 0x33
    19c0:	85 30       	cpi	r24, 0x05	; 5
    19c2:	58 f3       	brcs	.-42     	; 0x199a <main+0xd4>


	while (1)
	{
		/* select an option */
		while (clear != 0) {}; LCD_displayString("select an option");
    19c4:	80 91 fa 00 	lds	r24, 0x00FA
    19c8:	88 23       	and	r24, r24
    19ca:	e1 f7       	brne	.-8      	; 0x19c4 <main+0xfe>
    19cc:	85 e8       	ldi	r24, 0x85	; 133
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCD_displayString>
		uint8 option = KeyPad_getPressedKey();
    19d4:	0e 94 a1 06 	call	0xd42	; 0xd42 <KeyPad_getPressedKey>
    19d8:	8a ab       	std	Y+50, r24	; 0x32
		LCD_clearScreen();
    19da:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <LCD_clearScreen>

		/* option(-) open door */
		if (option == '-') //open door
    19de:	8a a9       	ldd	r24, Y+50	; 0x32
    19e0:	8d 32       	cpi	r24, 0x2D	; 45
    19e2:	09 f0       	breq	.+2      	; 0x19e6 <main+0x120>
    19e4:	62 c1       	rjmp	.+708    	; 0x1caa <main+0x3e4>
		{
			uint8 success = 0;
    19e6:	19 aa       	std	Y+49, r1	; 0x31
			uint8 tries = 0;
    19e8:	18 aa       	std	Y+48, r1	; 0x30
			do
			{
				/* get password from user*/
				LCD_displayString("enter the pass: ");
    19ea:	86 e9       	ldi	r24, 0x96	; 150
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCD_displayString>
				get_password(new_password);
    19f2:	ce 01       	movw	r24, r28
    19f4:	c8 96       	adiw	r24, 0x38	; 56
    19f6:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_password>

				/* send the password using UART */
				uart_sendByte(READY);
    19fa:	80 e1       	ldi	r24, 0x10	; 16
    19fc:	0e 94 18 11 	call	0x2230	; 0x2230 <uart_sendByte>
				uart_sendByte('-');
    1a00:	8d e2       	ldi	r24, 0x2D	; 45
    1a02:	0e 94 18 11 	call	0x2230	; 0x2230 <uart_sendByte>
				for (uint8 i = 0; i < 5; i++)
    1a06:	1f a6       	std	Y+47, r1	; 0x2f
    1a08:	12 c0       	rjmp	.+36     	; 0x1a2e <main+0x168>
				{
					while (uart_recieveByte() != READY){};
    1a0a:	0e 94 2f 11 	call	0x225e	; 0x225e <uart_recieveByte>
    1a0e:	80 31       	cpi	r24, 0x10	; 16
    1a10:	e1 f7       	brne	.-8      	; 0x1a0a <main+0x144>
					uart_sendByte(new_password[i]);
    1a12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a14:	28 2f       	mov	r18, r24
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	ce 01       	movw	r24, r28
    1a1a:	c8 96       	adiw	r24, 0x38	; 56
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	e2 0f       	add	r30, r18
    1a20:	f3 1f       	adc	r31, r19
    1a22:	80 81       	ld	r24, Z
    1a24:	0e 94 18 11 	call	0x2230	; 0x2230 <uart_sendByte>
				get_password(new_password);

				/* send the password using UART */
				uart_sendByte(READY);
				uart_sendByte('-');
				for (uint8 i = 0; i < 5; i++)
    1a28:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a2a:	8f 5f       	subi	r24, 0xFF	; 255
    1a2c:	8f a7       	std	Y+47, r24	; 0x2f
    1a2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a30:	85 30       	cpi	r24, 0x05	; 5
    1a32:	58 f3       	brcs	.-42     	; 0x1a0a <main+0x144>
					uart_sendByte(new_password[i]);
				}

				/* receive the result from MC2 (matching or dis_matching) */
				//while (uart_recieveByte() != READY){};
				uart_sendByte(READY);  // matching
    1a34:	80 e1       	ldi	r24, 0x10	; 16
    1a36:	0e 94 18 11 	call	0x2230	; 0x2230 <uart_sendByte>
				if (uart_recieveByte() == MATCHING)
    1a3a:	0e 94 2f 11 	call	0x225e	; 0x225e <uart_recieveByte>
    1a3e:	80 32       	cpi	r24, 0x20	; 32
    1a40:	09 f0       	breq	.+2      	; 0x1a44 <main+0x17e>
    1a42:	5c c0       	rjmp	.+184    	; 0x1afc <main+0x236>
					LCD_displayString("door locking");
					_delay_ms(1000);
					LCD_clearScreen();
					success = 1;*/

						Timer1_set_CallBack(LCD_clear);
    1a44:	84 e8       	ldi	r24, 0x84	; 132
    1a46:	96 e0       	ldi	r25, 0x06	; 6
    1a48:	0e 94 90 10 	call	0x2120	; 0x2120 <Timer1_set_CallBack>
						LCD_displayString("door unlocking");
    1a4c:	87 ea       	ldi	r24, 0xA7	; 167
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCD_displayString>
						clear = 1;
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	80 93 fa 00 	sts	0x00FA, r24
						//Timer1_init(8000);
						Timer1_config timer_config = {F_CPU_1024, 0, 8000};
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	8e 5b       	subi	r24, 0xBE	; 190
    1a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a60:	68 96       	adiw	r28, 0x18	; 24
    1a62:	9f af       	std	Y+63, r25	; 0x3f
    1a64:	8e af       	std	Y+62, r24	; 0x3e
    1a66:	68 97       	sbiw	r28, 0x18	; 24
    1a68:	81 ef       	ldi	r24, 0xF1	; 241
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	6a 96       	adiw	r28, 0x1a	; 26
    1a6e:	9f af       	std	Y+63, r25	; 0x3f
    1a70:	8e af       	std	Y+62, r24	; 0x3e
    1a72:	6a 97       	sbiw	r28, 0x1a	; 26
    1a74:	95 e0       	ldi	r25, 0x05	; 5
    1a76:	6b 96       	adiw	r28, 0x1b	; 27
    1a78:	9f af       	std	Y+63, r25	; 0x3f
    1a7a:	6b 97       	sbiw	r28, 0x1b	; 27
    1a7c:	6a 96       	adiw	r28, 0x1a	; 26
    1a7e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a80:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a82:	6a 97       	sbiw	r28, 0x1a	; 26
    1a84:	00 80       	ld	r0, Z
    1a86:	6a 96       	adiw	r28, 0x1a	; 26
    1a88:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a8a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a8c:	6a 97       	sbiw	r28, 0x1a	; 26
    1a8e:	01 96       	adiw	r24, 0x01	; 1
    1a90:	6a 96       	adiw	r28, 0x1a	; 26
    1a92:	9f af       	std	Y+63, r25	; 0x3f
    1a94:	8e af       	std	Y+62, r24	; 0x3e
    1a96:	6a 97       	sbiw	r28, 0x1a	; 26
    1a98:	68 96       	adiw	r28, 0x18	; 24
    1a9a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a9c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a9e:	68 97       	sbiw	r28, 0x18	; 24
    1aa0:	00 82       	st	Z, r0
    1aa2:	68 96       	adiw	r28, 0x18	; 24
    1aa4:	8e ad       	ldd	r24, Y+62	; 0x3e
    1aa6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1aa8:	68 97       	sbiw	r28, 0x18	; 24
    1aaa:	01 96       	adiw	r24, 0x01	; 1
    1aac:	68 96       	adiw	r28, 0x18	; 24
    1aae:	9f af       	std	Y+63, r25	; 0x3f
    1ab0:	8e af       	std	Y+62, r24	; 0x3e
    1ab2:	68 97       	sbiw	r28, 0x18	; 24
    1ab4:	6b 96       	adiw	r28, 0x1b	; 27
    1ab6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ab8:	6b 97       	sbiw	r28, 0x1b	; 27
    1aba:	91 50       	subi	r25, 0x01	; 1
    1abc:	6b 96       	adiw	r28, 0x1b	; 27
    1abe:	9f af       	std	Y+63, r25	; 0x3f
    1ac0:	6b 97       	sbiw	r28, 0x1b	; 27
    1ac2:	6b 96       	adiw	r28, 0x1b	; 27
    1ac4:	ef ad       	ldd	r30, Y+63	; 0x3f
    1ac6:	6b 97       	sbiw	r28, 0x1b	; 27
    1ac8:	ee 23       	and	r30, r30
    1aca:	c1 f6       	brne	.-80     	; 0x1a7c <main+0x1b6>
						Timer1_init(&timer_config);
    1acc:	ce 01       	movw	r24, r28
    1ace:	8e 5b       	subi	r24, 0xBE	; 190
    1ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad2:	0e 94 43 10 	call	0x2086	; 0x2086 <Timer1_init>
						while(clear == 1) {};
    1ad6:	80 91 fa 00 	lds	r24, 0x00FA
    1ada:	81 30       	cpi	r24, 0x01	; 1
    1adc:	e1 f3       	breq	.-8      	; 0x1ad6 <main+0x210>
						LCD_displayString("door locking");
    1ade:	86 eb       	ldi	r24, 0xB6	; 182
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCD_displayString>
						clear = 1;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	80 93 fa 00 	sts	0x00FA, r24
						//Timer1_init(8000);
						Timer1_init(&timer_config);
    1aec:	ce 01       	movw	r24, r28
    1aee:	8e 5b       	subi	r24, 0xBE	; 190
    1af0:	9f 4f       	sbci	r25, 0xFF	; 255
    1af2:	0e 94 43 10 	call	0x2086	; 0x2086 <Timer1_init>
						success = 1;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	89 ab       	std	Y+49, r24	; 0x31
    1afa:	7c c0       	rjmp	.+248    	; 0x1bf4 <main+0x32e>

				}
				else  // dis_matching
				{
					LCD_displayString("dis_matching");
    1afc:	83 ec       	ldi	r24, 0xC3	; 195
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCD_displayString>
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	a8 ec       	ldi	r26, 0xC8	; 200
    1b0a:	b2 e4       	ldi	r27, 0x42	; 66
    1b0c:	8f a3       	std	Y+39, r24	; 0x27
    1b0e:	98 a7       	std	Y+40, r25	; 0x28
    1b10:	a9 a7       	std	Y+41, r26	; 0x29
    1b12:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b14:	6f a1       	ldd	r22, Y+39	; 0x27
    1b16:	78 a5       	ldd	r23, Y+40	; 0x28
    1b18:	89 a5       	ldd	r24, Y+41	; 0x29
    1b1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	4a ef       	ldi	r20, 0xFA	; 250
    1b22:	54 e4       	ldi	r21, 0x44	; 68
    1b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	8b a3       	std	Y+35, r24	; 0x23
    1b2e:	9c a3       	std	Y+36, r25	; 0x24
    1b30:	ad a3       	std	Y+37, r26	; 0x25
    1b32:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b34:	6b a1       	ldd	r22, Y+35	; 0x23
    1b36:	7c a1       	ldd	r23, Y+36	; 0x24
    1b38:	8d a1       	ldd	r24, Y+37	; 0x25
    1b3a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e8       	ldi	r20, 0x80	; 128
    1b42:	5f e3       	ldi	r21, 0x3F	; 63
    1b44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b48:	88 23       	and	r24, r24
    1b4a:	2c f4       	brge	.+10     	; 0x1b56 <main+0x290>
		__ticks = 1;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	9a a3       	std	Y+34, r25	; 0x22
    1b52:	89 a3       	std	Y+33, r24	; 0x21
    1b54:	3f c0       	rjmp	.+126    	; 0x1bd4 <main+0x30e>
	else if (__tmp > 65535)
    1b56:	6b a1       	ldd	r22, Y+35	; 0x23
    1b58:	7c a1       	ldd	r23, Y+36	; 0x24
    1b5a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b5c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	3f ef       	ldi	r19, 0xFF	; 255
    1b62:	4f e7       	ldi	r20, 0x7F	; 127
    1b64:	57 e4       	ldi	r21, 0x47	; 71
    1b66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b6a:	18 16       	cp	r1, r24
    1b6c:	4c f5       	brge	.+82     	; 0x1bc0 <main+0x2fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b6e:	6f a1       	ldd	r22, Y+39	; 0x27
    1b70:	78 a5       	ldd	r23, Y+40	; 0x28
    1b72:	89 a5       	ldd	r24, Y+41	; 0x29
    1b74:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e2       	ldi	r20, 0x20	; 32
    1b7c:	51 e4       	ldi	r21, 0x41	; 65
    1b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	bc 01       	movw	r22, r24
    1b88:	cd 01       	movw	r24, r26
    1b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	9a a3       	std	Y+34, r25	; 0x22
    1b94:	89 a3       	std	Y+33, r24	; 0x21
    1b96:	0f c0       	rjmp	.+30     	; 0x1bb6 <main+0x2f0>
    1b98:	88 ec       	ldi	r24, 0xC8	; 200
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	98 a3       	std	Y+32, r25	; 0x20
    1b9e:	8f 8f       	std	Y+31, r24	; 0x1f
    1ba0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ba2:	98 a1       	ldd	r25, Y+32	; 0x20
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <main+0x2de>
    1ba8:	98 a3       	std	Y+32, r25	; 0x20
    1baa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bac:	89 a1       	ldd	r24, Y+33	; 0x21
    1bae:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb0:	01 97       	sbiw	r24, 0x01	; 1
    1bb2:	9a a3       	std	Y+34, r25	; 0x22
    1bb4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb6:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bba:	00 97       	sbiw	r24, 0x00	; 0
    1bbc:	69 f7       	brne	.-38     	; 0x1b98 <main+0x2d2>
    1bbe:	14 c0       	rjmp	.+40     	; 0x1be8 <main+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc0:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc2:	7c a1       	ldd	r23, Y+36	; 0x24
    1bc4:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc6:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	9a a3       	std	Y+34, r25	; 0x22
    1bd2:	89 a3       	std	Y+33, r24	; 0x21
    1bd4:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd6:	9a a1       	ldd	r25, Y+34	; 0x22
    1bd8:	9e 8f       	std	Y+30, r25	; 0x1e
    1bda:	8d 8f       	std	Y+29, r24	; 0x1d
    1bdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bde:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	f1 f7       	brne	.-4      	; 0x1be0 <main+0x31a>
    1be4:	9e 8f       	std	Y+30, r25	; 0x1e
    1be6:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(100);
					LCD_clearScreen();
    1be8:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <LCD_clearScreen>
					success = 0;
    1bec:	19 aa       	std	Y+49, r1	; 0x31
					tries ++;
    1bee:	88 a9       	ldd	r24, Y+48	; 0x30
    1bf0:	8f 5f       	subi	r24, 0xFF	; 255
    1bf2:	88 ab       	std	Y+48, r24	; 0x30
				}

			}while(!(success) && tries != 3);
    1bf4:	89 a9       	ldd	r24, Y+49	; 0x31
    1bf6:	88 23       	and	r24, r24
    1bf8:	21 f4       	brne	.+8      	; 0x1c02 <main+0x33c>
    1bfa:	88 a9       	ldd	r24, Y+48	; 0x30
    1bfc:	83 30       	cpi	r24, 0x03	; 3
    1bfe:	09 f0       	breq	.+2      	; 0x1c02 <main+0x33c>
    1c00:	f4 ce       	rjmp	.-536    	; 0x19ea <main+0x124>

			if (tries == 3)
    1c02:	88 a9       	ldd	r24, Y+48	; 0x30
    1c04:	83 30       	cpi	r24, 0x03	; 3
    1c06:	09 f0       	breq	.+2      	; 0x1c0a <main+0x344>
    1c08:	dd ce       	rjmp	.-582    	; 0x19c4 <main+0xfe>
			{
				Timer1_set_CallBack(LCD_clear);
    1c0a:	84 e8       	ldi	r24, 0x84	; 132
    1c0c:	96 e0       	ldi	r25, 0x06	; 6
    1c0e:	0e 94 90 10 	call	0x2120	; 0x2120 <Timer1_set_CallBack>
				LCD_displayString("THIEF");
    1c12:	80 ed       	ldi	r24, 0xD0	; 208
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCD_displayString>
				uart_sendByte(READY);
    1c1a:	80 e1       	ldi	r24, 0x10	; 16
    1c1c:	0e 94 18 11 	call	0x2230	; 0x2230 <uart_sendByte>
				uart_sendByte(THEIF);
    1c20:	80 e4       	ldi	r24, 0x40	; 64
    1c22:	0e 94 18 11 	call	0x2230	; 0x2230 <uart_sendByte>
				clear = 1;
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	80 93 fa 00 	sts	0x00FA, r24
				//Timer1_init(65000);
				Timer1_config timer_config = {F_CPU_1024, 0, 65000};
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	89 5b       	subi	r24, 0xB9	; 185
    1c30:	9f 4f       	sbci	r25, 0xFF	; 255
    1c32:	6d 96       	adiw	r28, 0x1d	; 29
    1c34:	9f af       	std	Y+63, r25	; 0x3f
    1c36:	8e af       	std	Y+62, r24	; 0x3e
    1c38:	6d 97       	sbiw	r28, 0x1d	; 29
    1c3a:	8c ee       	ldi	r24, 0xEC	; 236
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	6f 96       	adiw	r28, 0x1f	; 31
    1c40:	9f af       	std	Y+63, r25	; 0x3f
    1c42:	8e af       	std	Y+62, r24	; 0x3e
    1c44:	6f 97       	sbiw	r28, 0x1f	; 31
    1c46:	95 e0       	ldi	r25, 0x05	; 5
    1c48:	a0 96       	adiw	r28, 0x20	; 32
    1c4a:	9f af       	std	Y+63, r25	; 0x3f
    1c4c:	a0 97       	sbiw	r28, 0x20	; 32
    1c4e:	6f 96       	adiw	r28, 0x1f	; 31
    1c50:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c52:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c54:	6f 97       	sbiw	r28, 0x1f	; 31
    1c56:	00 80       	ld	r0, Z
    1c58:	6f 96       	adiw	r28, 0x1f	; 31
    1c5a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c5c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c5e:	6f 97       	sbiw	r28, 0x1f	; 31
    1c60:	01 96       	adiw	r24, 0x01	; 1
    1c62:	6f 96       	adiw	r28, 0x1f	; 31
    1c64:	9f af       	std	Y+63, r25	; 0x3f
    1c66:	8e af       	std	Y+62, r24	; 0x3e
    1c68:	6f 97       	sbiw	r28, 0x1f	; 31
    1c6a:	6d 96       	adiw	r28, 0x1d	; 29
    1c6c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c6e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c70:	6d 97       	sbiw	r28, 0x1d	; 29
    1c72:	00 82       	st	Z, r0
    1c74:	6d 96       	adiw	r28, 0x1d	; 29
    1c76:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c78:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c7a:	6d 97       	sbiw	r28, 0x1d	; 29
    1c7c:	01 96       	adiw	r24, 0x01	; 1
    1c7e:	6d 96       	adiw	r28, 0x1d	; 29
    1c80:	9f af       	std	Y+63, r25	; 0x3f
    1c82:	8e af       	std	Y+62, r24	; 0x3e
    1c84:	6d 97       	sbiw	r28, 0x1d	; 29
    1c86:	a0 96       	adiw	r28, 0x20	; 32
    1c88:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c8a:	a0 97       	sbiw	r28, 0x20	; 32
    1c8c:	91 50       	subi	r25, 0x01	; 1
    1c8e:	a0 96       	adiw	r28, 0x20	; 32
    1c90:	9f af       	std	Y+63, r25	; 0x3f
    1c92:	a0 97       	sbiw	r28, 0x20	; 32
    1c94:	a0 96       	adiw	r28, 0x20	; 32
    1c96:	ef ad       	ldd	r30, Y+63	; 0x3f
    1c98:	a0 97       	sbiw	r28, 0x20	; 32
    1c9a:	ee 23       	and	r30, r30
    1c9c:	c1 f6       	brne	.-80     	; 0x1c4e <main+0x388>
				Timer1_init(&timer_config);
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	89 5b       	subi	r24, 0xB9	; 185
    1ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca4:	0e 94 43 10 	call	0x2086	; 0x2086 <Timer1_init>
    1ca8:	8d ce       	rjmp	.-742    	; 0x19c4 <main+0xfe>

		}


		/* option(+) change password*/
		else if (option == '+') //change password
    1caa:	8a a9       	ldd	r24, Y+50	; 0x32
    1cac:	8b 32       	cpi	r24, 0x2B	; 43
    1cae:	09 f0       	breq	.+2      	; 0x1cb2 <main+0x3ec>
    1cb0:	89 ce       	rjmp	.-750    	; 0x19c4 <main+0xfe>
		{
			uint8 success = 0;
    1cb2:	1e a6       	std	Y+46, r1	; 0x2e
			uint8 tries = 0;
    1cb4:	1d a6       	std	Y+45, r1	; 0x2d
			do
			{
				/* get password from user*/
				LCD_displayString("enter the pass: ");
    1cb6:	86 e9       	ldi	r24, 0x96	; 150
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCD_displayString>
				get_password(new_password);
    1cbe:	ce 01       	movw	r24, r28
    1cc0:	c8 96       	adiw	r24, 0x38	; 56
    1cc2:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_password>

				/* send the password using UART */
				uart_sendByte(READY);
    1cc6:	80 e1       	ldi	r24, 0x10	; 16
    1cc8:	0e 94 18 11 	call	0x2230	; 0x2230 <uart_sendByte>
				uart_sendByte('+');
    1ccc:	8b e2       	ldi	r24, 0x2B	; 43
    1cce:	0e 94 18 11 	call	0x2230	; 0x2230 <uart_sendByte>
				for (uint8 i = 0; i < 5; i++)
    1cd2:	1c a6       	std	Y+44, r1	; 0x2c
    1cd4:	12 c0       	rjmp	.+36     	; 0x1cfa <main+0x434>
				{
					while (uart_recieveByte() != READY){};
    1cd6:	0e 94 2f 11 	call	0x225e	; 0x225e <uart_recieveByte>
    1cda:	80 31       	cpi	r24, 0x10	; 16
    1cdc:	e1 f7       	brne	.-8      	; 0x1cd6 <main+0x410>
					uart_sendByte(new_password[i]);
    1cde:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ce0:	28 2f       	mov	r18, r24
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	c8 96       	adiw	r24, 0x38	; 56
    1ce8:	fc 01       	movw	r30, r24
    1cea:	e2 0f       	add	r30, r18
    1cec:	f3 1f       	adc	r31, r19
    1cee:	80 81       	ld	r24, Z
    1cf0:	0e 94 18 11 	call	0x2230	; 0x2230 <uart_sendByte>
				get_password(new_password);

				/* send the password using UART */
				uart_sendByte(READY);
				uart_sendByte('+');
				for (uint8 i = 0; i < 5; i++)
    1cf4:	8c a5       	ldd	r24, Y+44	; 0x2c
    1cf6:	8f 5f       	subi	r24, 0xFF	; 255
    1cf8:	8c a7       	std	Y+44, r24	; 0x2c
    1cfa:	8c a5       	ldd	r24, Y+44	; 0x2c
    1cfc:	85 30       	cpi	r24, 0x05	; 5
    1cfe:	58 f3       	brcs	.-42     	; 0x1cd6 <main+0x410>
					uart_sendByte(new_password[i]);
				}

				/* receive the result from MC2 (matching or dis_matching) */
				//while (uart_recieveByte() != READY){};
				uart_sendByte(READY);  // matching
    1d00:	80 e1       	ldi	r24, 0x10	; 16
    1d02:	0e 94 18 11 	call	0x2230	; 0x2230 <uart_sendByte>
				if (uart_recieveByte() == MATCHING)
    1d06:	0e 94 2f 11 	call	0x225e	; 0x225e <uart_recieveByte>
    1d0a:	80 32       	cpi	r24, 0x20	; 32
    1d0c:	09 f0       	breq	.+2      	; 0x1d10 <main+0x44a>
    1d0e:	b1 c0       	rjmp	.+354    	; 0x1e72 <main+0x5ac>
				{
					LCD_displayString("matching");
    1d10:	86 ed       	ldi	r24, 0xD6	; 214
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCD_displayString>
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	a8 ec       	ldi	r26, 0xC8	; 200
    1d1e:	b2 e4       	ldi	r27, 0x42	; 66
    1d20:	89 8f       	std	Y+25, r24	; 0x19
    1d22:	9a 8f       	std	Y+26, r25	; 0x1a
    1d24:	ab 8f       	std	Y+27, r26	; 0x1b
    1d26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d28:	69 8d       	ldd	r22, Y+25	; 0x19
    1d2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	4a ef       	ldi	r20, 0xFA	; 250
    1d36:	54 e4       	ldi	r21, 0x44	; 68
    1d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	8d 8b       	std	Y+21, r24	; 0x15
    1d42:	9e 8b       	std	Y+22, r25	; 0x16
    1d44:	af 8b       	std	Y+23, r26	; 0x17
    1d46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d48:	6d 89       	ldd	r22, Y+21	; 0x15
    1d4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e8       	ldi	r20, 0x80	; 128
    1d56:	5f e3       	ldi	r21, 0x3F	; 63
    1d58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d5c:	88 23       	and	r24, r24
    1d5e:	2c f4       	brge	.+10     	; 0x1d6a <main+0x4a4>
		__ticks = 1;
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	9c 8b       	std	Y+20, r25	; 0x14
    1d66:	8b 8b       	std	Y+19, r24	; 0x13
    1d68:	3f c0       	rjmp	.+126    	; 0x1de8 <main+0x522>
	else if (__tmp > 65535)
    1d6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d70:	98 8d       	ldd	r25, Y+24	; 0x18
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	3f ef       	ldi	r19, 0xFF	; 255
    1d76:	4f e7       	ldi	r20, 0x7F	; 127
    1d78:	57 e4       	ldi	r21, 0x47	; 71
    1d7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d7e:	18 16       	cp	r1, r24
    1d80:	4c f5       	brge	.+82     	; 0x1dd4 <main+0x50e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d82:	69 8d       	ldd	r22, Y+25	; 0x19
    1d84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e2       	ldi	r20, 0x20	; 32
    1d90:	51 e4       	ldi	r21, 0x41	; 65
    1d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	bc 01       	movw	r22, r24
    1d9c:	cd 01       	movw	r24, r26
    1d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	9c 8b       	std	Y+20, r25	; 0x14
    1da8:	8b 8b       	std	Y+19, r24	; 0x13
    1daa:	0f c0       	rjmp	.+30     	; 0x1dca <main+0x504>
    1dac:	88 ec       	ldi	r24, 0xC8	; 200
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	9a 8b       	std	Y+18, r25	; 0x12
    1db2:	89 8b       	std	Y+17, r24	; 0x11
    1db4:	89 89       	ldd	r24, Y+17	; 0x11
    1db6:	9a 89       	ldd	r25, Y+18	; 0x12
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	f1 f7       	brne	.-4      	; 0x1db8 <main+0x4f2>
    1dbc:	9a 8b       	std	Y+18, r25	; 0x12
    1dbe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	9c 8b       	std	Y+20, r25	; 0x14
    1dc8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dca:	8b 89       	ldd	r24, Y+19	; 0x13
    1dcc:	9c 89       	ldd	r25, Y+20	; 0x14
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	69 f7       	brne	.-38     	; 0x1dac <main+0x4e6>
    1dd2:	14 c0       	rjmp	.+40     	; 0x1dfc <main+0x536>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd4:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd6:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dda:	98 8d       	ldd	r25, Y+24	; 0x18
    1ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	9c 8b       	std	Y+20, r25	; 0x14
    1de6:	8b 8b       	std	Y+19, r24	; 0x13
    1de8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dea:	9c 89       	ldd	r25, Y+20	; 0x14
    1dec:	98 8b       	std	Y+16, r25	; 0x10
    1dee:	8f 87       	std	Y+15, r24	; 0x0f
    1df0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1df2:	98 89       	ldd	r25, Y+16	; 0x10
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <main+0x52e>
    1df8:	98 8b       	std	Y+16, r25	; 0x10
    1dfa:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(100);
					LCD_clearScreen();
    1dfc:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <LCD_clearScreen>
					success = 1;
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	8e a7       	std	Y+46, r24	; 0x2e
					do
					{
						LCD_displayString("enter new pass: ");
    1e04:	80 e6       	ldi	r24, 0x60	; 96
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCD_displayString>
						get_password(new_password);
    1e0c:	ce 01       	movw	r24, r28
    1e0e:	c8 96       	adiw	r24, 0x38	; 56
    1e10:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_password>
						LCD_displayString("re_enter new pass: ");
    1e14:	81 e7       	ldi	r24, 0x71	; 113
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCD_displayString>
						get_password(re_new_password);
    1e1c:	ce 01       	movw	r24, r28
    1e1e:	cd 96       	adiw	r24, 0x3d	; 61
    1e20:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_password>
						compare = cmp (new_password, re_new_password);
    1e24:	ce 01       	movw	r24, r28
    1e26:	c8 96       	adiw	r24, 0x38	; 56
    1e28:	9e 01       	movw	r18, r28
    1e2a:	23 5c       	subi	r18, 0xC3	; 195
    1e2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e2e:	b9 01       	movw	r22, r18
    1e30:	0e 94 4f 06 	call	0xc9e	; 0xc9e <cmp>
    1e34:	8c ab       	std	Y+52, r24	; 0x34
					}
					while (!compare);
    1e36:	8c a9       	ldd	r24, Y+52	; 0x34
    1e38:	88 23       	and	r24, r24
    1e3a:	21 f3       	breq	.-56     	; 0x1e04 <main+0x53e>


					/* send the new password using uart to the MC2 */
					uart_sendByte(READY);
    1e3c:	80 e1       	ldi	r24, 0x10	; 16
    1e3e:	0e 94 18 11 	call	0x2230	; 0x2230 <uart_sendByte>
					for (uint8 i = 0; i < 5; i++)
    1e42:	1b a6       	std	Y+43, r1	; 0x2b
    1e44:	12 c0       	rjmp	.+36     	; 0x1e6a <main+0x5a4>
					{
						while (uart_recieveByte() != READY){};
    1e46:	0e 94 2f 11 	call	0x225e	; 0x225e <uart_recieveByte>
    1e4a:	80 31       	cpi	r24, 0x10	; 16
    1e4c:	e1 f7       	brne	.-8      	; 0x1e46 <main+0x580>
						uart_sendByte(new_password[i]);
    1e4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e50:	28 2f       	mov	r18, r24
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	ce 01       	movw	r24, r28
    1e56:	c8 96       	adiw	r24, 0x38	; 56
    1e58:	fc 01       	movw	r30, r24
    1e5a:	e2 0f       	add	r30, r18
    1e5c:	f3 1f       	adc	r31, r19
    1e5e:	80 81       	ld	r24, Z
    1e60:	0e 94 18 11 	call	0x2230	; 0x2230 <uart_sendByte>
					while (!compare);


					/* send the new password using uart to the MC2 */
					uart_sendByte(READY);
					for (uint8 i = 0; i < 5; i++)
    1e64:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e66:	8f 5f       	subi	r24, 0xFF	; 255
    1e68:	8b a7       	std	Y+43, r24	; 0x2b
    1e6a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e6c:	85 30       	cpi	r24, 0x05	; 5
    1e6e:	58 f3       	brcs	.-42     	; 0x1e46 <main+0x580>
    1e70:	7c c0       	rjmp	.+248    	; 0x1f6a <main+0x6a4>
					}

				}
				else  // dis_matching
				{
					LCD_displayString("dis_matching");
    1e72:	83 ec       	ldi	r24, 0xC3	; 195
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCD_displayString>
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	a8 ec       	ldi	r26, 0xC8	; 200
    1e80:	b2 e4       	ldi	r27, 0x42	; 66
    1e82:	8b 87       	std	Y+11, r24	; 0x0b
    1e84:	9c 87       	std	Y+12, r25	; 0x0c
    1e86:	ad 87       	std	Y+13, r26	; 0x0d
    1e88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	4a ef       	ldi	r20, 0xFA	; 250
    1e98:	54 e4       	ldi	r21, 0x44	; 68
    1e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	8f 83       	std	Y+7, r24	; 0x07
    1ea4:	98 87       	std	Y+8, r25	; 0x08
    1ea6:	a9 87       	std	Y+9, r26	; 0x09
    1ea8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1eac:	78 85       	ldd	r23, Y+8	; 0x08
    1eae:	89 85       	ldd	r24, Y+9	; 0x09
    1eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e8       	ldi	r20, 0x80	; 128
    1eb8:	5f e3       	ldi	r21, 0x3F	; 63
    1eba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ebe:	88 23       	and	r24, r24
    1ec0:	2c f4       	brge	.+10     	; 0x1ecc <main+0x606>
		__ticks = 1;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9e 83       	std	Y+6, r25	; 0x06
    1ec8:	8d 83       	std	Y+5, r24	; 0x05
    1eca:	3f c0       	rjmp	.+126    	; 0x1f4a <main+0x684>
	else if (__tmp > 65535)
    1ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ece:	78 85       	ldd	r23, Y+8	; 0x08
    1ed0:	89 85       	ldd	r24, Y+9	; 0x09
    1ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	3f ef       	ldi	r19, 0xFF	; 255
    1ed8:	4f e7       	ldi	r20, 0x7F	; 127
    1eda:	57 e4       	ldi	r21, 0x47	; 71
    1edc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ee0:	18 16       	cp	r1, r24
    1ee2:	4c f5       	brge	.+82     	; 0x1f36 <main+0x670>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e2       	ldi	r20, 0x20	; 32
    1ef2:	51 e4       	ldi	r21, 0x41	; 65
    1ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	bc 01       	movw	r22, r24
    1efe:	cd 01       	movw	r24, r26
    1f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	9e 83       	std	Y+6, r25	; 0x06
    1f0a:	8d 83       	std	Y+5, r24	; 0x05
    1f0c:	0f c0       	rjmp	.+30     	; 0x1f2c <main+0x666>
    1f0e:	88 ec       	ldi	r24, 0xC8	; 200
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	9c 83       	std	Y+4, r25	; 0x04
    1f14:	8b 83       	std	Y+3, r24	; 0x03
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <main+0x654>
    1f1e:	9c 83       	std	Y+4, r25	; 0x04
    1f20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f22:	8d 81       	ldd	r24, Y+5	; 0x05
    1f24:	9e 81       	ldd	r25, Y+6	; 0x06
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	9e 83       	std	Y+6, r25	; 0x06
    1f2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	69 f7       	brne	.-38     	; 0x1f0e <main+0x648>
    1f34:	14 c0       	rjmp	.+40     	; 0x1f5e <main+0x698>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f36:	6f 81       	ldd	r22, Y+7	; 0x07
    1f38:	78 85       	ldd	r23, Y+8	; 0x08
    1f3a:	89 85       	ldd	r24, Y+9	; 0x09
    1f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	9e 83       	std	Y+6, r25	; 0x06
    1f48:	8d 83       	std	Y+5, r24	; 0x05
    1f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4e:	9a 83       	std	Y+2, r25	; 0x02
    1f50:	89 83       	std	Y+1, r24	; 0x01
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	9a 81       	ldd	r25, Y+2	; 0x02
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <main+0x690>
    1f5a:	9a 83       	std	Y+2, r25	; 0x02
    1f5c:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(100);
					LCD_clearScreen();
    1f5e:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <LCD_clearScreen>
					success = 0;
    1f62:	1e a6       	std	Y+46, r1	; 0x2e
					tries ++;
    1f64:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f66:	8f 5f       	subi	r24, 0xFF	; 255
    1f68:	8d a7       	std	Y+45, r24	; 0x2d
				}

			}while(!(success) && tries != 3);
    1f6a:	8e a5       	ldd	r24, Y+46	; 0x2e
    1f6c:	88 23       	and	r24, r24
    1f6e:	21 f4       	brne	.+8      	; 0x1f78 <main+0x6b2>
    1f70:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f72:	83 30       	cpi	r24, 0x03	; 3
    1f74:	09 f0       	breq	.+2      	; 0x1f78 <main+0x6b2>
    1f76:	9f ce       	rjmp	.-706    	; 0x1cb6 <main+0x3f0>

			if (tries == 3)
    1f78:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f7a:	83 30       	cpi	r24, 0x03	; 3
    1f7c:	09 f0       	breq	.+2      	; 0x1f80 <main+0x6ba>
    1f7e:	22 cd       	rjmp	.-1468   	; 0x19c4 <main+0xfe>
			{
				Timer1_set_CallBack(LCD_clear);
    1f80:	84 e8       	ldi	r24, 0x84	; 132
    1f82:	96 e0       	ldi	r25, 0x06	; 6
    1f84:	0e 94 90 10 	call	0x2120	; 0x2120 <Timer1_set_CallBack>
				LCD_displayString("THIEF");
    1f88:	80 ed       	ldi	r24, 0xD0	; 208
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCD_displayString>
				uart_sendByte(READY);
    1f90:	80 e1       	ldi	r24, 0x10	; 16
    1f92:	0e 94 18 11 	call	0x2230	; 0x2230 <uart_sendByte>
				uart_sendByte(THEIF);
    1f96:	80 e4       	ldi	r24, 0x40	; 64
    1f98:	0e 94 18 11 	call	0x2230	; 0x2230 <uart_sendByte>
				clear = 1;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	80 93 fa 00 	sts	0x00FA, r24
				//Timer1_init(65000); // 1 second*/
				Timer1_config timer_config = {F_CPU_1024, 0, 8000};
    1fa2:	ce 01       	movw	r24, r28
    1fa4:	84 5b       	subi	r24, 0xB4	; 180
    1fa6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa8:	a2 96       	adiw	r28, 0x22	; 34
    1faa:	9f af       	std	Y+63, r25	; 0x3f
    1fac:	8e af       	std	Y+62, r24	; 0x3e
    1fae:	a2 97       	sbiw	r28, 0x22	; 34
    1fb0:	87 ee       	ldi	r24, 0xE7	; 231
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	a4 96       	adiw	r28, 0x24	; 36
    1fb6:	9f af       	std	Y+63, r25	; 0x3f
    1fb8:	8e af       	std	Y+62, r24	; 0x3e
    1fba:	a4 97       	sbiw	r28, 0x24	; 36
    1fbc:	95 e0       	ldi	r25, 0x05	; 5
    1fbe:	a5 96       	adiw	r28, 0x25	; 37
    1fc0:	9f af       	std	Y+63, r25	; 0x3f
    1fc2:	a5 97       	sbiw	r28, 0x25	; 37
    1fc4:	a4 96       	adiw	r28, 0x24	; 36
    1fc6:	ee ad       	ldd	r30, Y+62	; 0x3e
    1fc8:	ff ad       	ldd	r31, Y+63	; 0x3f
    1fca:	a4 97       	sbiw	r28, 0x24	; 36
    1fcc:	00 80       	ld	r0, Z
    1fce:	a4 96       	adiw	r28, 0x24	; 36
    1fd0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fd2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fd4:	a4 97       	sbiw	r28, 0x24	; 36
    1fd6:	01 96       	adiw	r24, 0x01	; 1
    1fd8:	a4 96       	adiw	r28, 0x24	; 36
    1fda:	9f af       	std	Y+63, r25	; 0x3f
    1fdc:	8e af       	std	Y+62, r24	; 0x3e
    1fde:	a4 97       	sbiw	r28, 0x24	; 36
    1fe0:	a2 96       	adiw	r28, 0x22	; 34
    1fe2:	ee ad       	ldd	r30, Y+62	; 0x3e
    1fe4:	ff ad       	ldd	r31, Y+63	; 0x3f
    1fe6:	a2 97       	sbiw	r28, 0x22	; 34
    1fe8:	00 82       	st	Z, r0
    1fea:	a2 96       	adiw	r28, 0x22	; 34
    1fec:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fee:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ff0:	a2 97       	sbiw	r28, 0x22	; 34
    1ff2:	01 96       	adiw	r24, 0x01	; 1
    1ff4:	a2 96       	adiw	r28, 0x22	; 34
    1ff6:	9f af       	std	Y+63, r25	; 0x3f
    1ff8:	8e af       	std	Y+62, r24	; 0x3e
    1ffa:	a2 97       	sbiw	r28, 0x22	; 34
    1ffc:	a5 96       	adiw	r28, 0x25	; 37
    1ffe:	9f ad       	ldd	r25, Y+63	; 0x3f
    2000:	a5 97       	sbiw	r28, 0x25	; 37
    2002:	91 50       	subi	r25, 0x01	; 1
    2004:	a5 96       	adiw	r28, 0x25	; 37
    2006:	9f af       	std	Y+63, r25	; 0x3f
    2008:	a5 97       	sbiw	r28, 0x25	; 37
    200a:	a5 96       	adiw	r28, 0x25	; 37
    200c:	ef ad       	ldd	r30, Y+63	; 0x3f
    200e:	a5 97       	sbiw	r28, 0x25	; 37
    2010:	ee 23       	and	r30, r30
    2012:	c1 f6       	brne	.-80     	; 0x1fc4 <main+0x6fe>
				Timer1_init(&timer_config);
    2014:	ce 01       	movw	r24, r28
    2016:	84 5b       	subi	r24, 0xB4	; 180
    2018:	9f 4f       	sbci	r25, 0xFF	; 255
    201a:	0e 94 43 10 	call	0x2086	; 0x2086 <Timer1_init>
    201e:	d2 cc       	rjmp	.-1628   	; 0x19c4 <main+0xfe>

00002020 <__vector_6>:
#include "timer.h"

static volatile void(*g_callBackPTr)(void) = NULL_PTR;

ISR (TIMER1_COMPA_vect)
{
    2020:	1f 92       	push	r1
    2022:	0f 92       	push	r0
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	0f 92       	push	r0
    2028:	11 24       	eor	r1, r1
    202a:	2f 93       	push	r18
    202c:	3f 93       	push	r19
    202e:	4f 93       	push	r20
    2030:	5f 93       	push	r21
    2032:	6f 93       	push	r22
    2034:	7f 93       	push	r23
    2036:	8f 93       	push	r24
    2038:	9f 93       	push	r25
    203a:	af 93       	push	r26
    203c:	bf 93       	push	r27
    203e:	ef 93       	push	r30
    2040:	ff 93       	push	r31
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPTr != NULL_PTR)
    204a:	80 91 fb 00 	lds	r24, 0x00FB
    204e:	90 91 fc 00 	lds	r25, 0x00FC
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	29 f0       	breq	.+10     	; 0x2060 <__vector_6+0x40>
	{
		(*g_callBackPTr)();
    2056:	e0 91 fb 00 	lds	r30, 0x00FB
    205a:	f0 91 fc 00 	lds	r31, 0x00FC
    205e:	09 95       	icall
	}

}
    2060:	cf 91       	pop	r28
    2062:	df 91       	pop	r29
    2064:	ff 91       	pop	r31
    2066:	ef 91       	pop	r30
    2068:	bf 91       	pop	r27
    206a:	af 91       	pop	r26
    206c:	9f 91       	pop	r25
    206e:	8f 91       	pop	r24
    2070:	7f 91       	pop	r23
    2072:	6f 91       	pop	r22
    2074:	5f 91       	pop	r21
    2076:	4f 91       	pop	r20
    2078:	3f 91       	pop	r19
    207a:	2f 91       	pop	r18
    207c:	0f 90       	pop	r0
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	0f 90       	pop	r0
    2082:	1f 90       	pop	r1
    2084:	18 95       	reti

00002086 <Timer1_init>:

void Timer1_init(const Timer1_config * config_Ptr)
{
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	00 d0       	rcall	.+0      	; 0x208c <Timer1_init+0x6>
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	9a 83       	std	Y+2, r25	; 0x02
    2092:	89 83       	std	Y+1, r24	; 0x01
	SREG |= (1 << 7); // I_bit
    2094:	af e5       	ldi	r26, 0x5F	; 95
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	ef e5       	ldi	r30, 0x5F	; 95
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	80 68       	ori	r24, 0x80	; 128
    20a0:	8c 93       	st	X, r24

	TCCR1A |= (1 << FOC1A) | (1 << FOC1B);  // non_PWM mode
    20a2:	af e4       	ldi	r26, 0x4F	; 79
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	ef e4       	ldi	r30, 0x4F	; 79
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	8c 60       	ori	r24, 0x0C	; 12
    20ae:	8c 93       	st	X, r24

	//TCCR1B = (1 << CS10) | (1 << CS12) | (1 << WGM12);   // pre_scalar = 8 MHZ / 1028 (interrupt every .128 second)  // compare mode

	TCCR1B = (TCCR1B & 0xF8) | (config_Ptr->clock); // pre_scalar
    20b0:	ae e4       	ldi	r26, 0x4E	; 78
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	ee e4       	ldi	r30, 0x4E	; 78
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	98 2f       	mov	r25, r24
    20bc:	98 7f       	andi	r25, 0xF8	; 248
    20be:	e9 81       	ldd	r30, Y+1	; 0x01
    20c0:	fa 81       	ldd	r31, Y+2	; 0x02
    20c2:	80 81       	ld	r24, Z
    20c4:	89 2b       	or	r24, r25
    20c6:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xF7) | (compare_mode_bit << WGM12); // Normal or compare mode
    20c8:	ae e4       	ldi	r26, 0x4E	; 78
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	ee e4       	ldi	r30, 0x4E	; 78
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	88 60       	ori	r24, 0x08	; 8
    20d4:	8c 93       	st	X, r24

	TCNT1 = config_Ptr->initial_value;  // initial value
    20d6:	ac e4       	ldi	r26, 0x4C	; 76
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e9 81       	ldd	r30, Y+1	; 0x01
    20dc:	fa 81       	ldd	r31, Y+2	; 0x02
    20de:	81 81       	ldd	r24, Z+1	; 0x01
    20e0:	92 81       	ldd	r25, Z+2	; 0x02
    20e2:	11 96       	adiw	r26, 0x01	; 1
    20e4:	9c 93       	st	X, r25
    20e6:	8e 93       	st	-X, r24
	OCR1A = config_Ptr->compare_value;  // compare value
    20e8:	aa e4       	ldi	r26, 0x4A	; 74
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	e9 81       	ldd	r30, Y+1	; 0x01
    20ee:	fa 81       	ldd	r31, Y+2	; 0x02
    20f0:	83 81       	ldd	r24, Z+3	; 0x03
    20f2:	94 81       	ldd	r25, Z+4	; 0x04
    20f4:	11 96       	adiw	r26, 0x01	; 1
    20f6:	9c 93       	st	X, r25
    20f8:	8e 93       	st	-X, r24

	TIMSK = (TIMSK & 0xEF) | (compare_interrupt << OCIE1A); // module interrupt enable (compare mode)
    20fa:	a9 e5       	ldi	r26, 0x59	; 89
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e9 e5       	ldi	r30, 0x59	; 89
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	80 61       	ori	r24, 0x10	; 16
    2106:	8c 93       	st	X, r24
	TIMSK = (TIMSK & 0xFD) | (normal_interrupt << TOIE1); // module interrupt enable (Normal mode)
    2108:	a9 e5       	ldi	r26, 0x59	; 89
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e9 e5       	ldi	r30, 0x59	; 89
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	8d 7f       	andi	r24, 0xFD	; 253
    2114:	8c 93       	st	X, r24
}
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <Timer1_set_CallBack>:

void Timer1_set_CallBack(void(*a_ptr)(void))
{
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	00 d0       	rcall	.+0      	; 0x2126 <Timer1_set_CallBack+0x6>
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	9a 83       	std	Y+2, r25	; 0x02
    212c:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPTr = a_ptr;
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	9a 81       	ldd	r25, Y+2	; 0x02
    2132:	90 93 fc 00 	sts	0x00FC, r25
    2136:	80 93 fb 00 	sts	0x00FB, r24
}
    213a:	0f 90       	pop	r0
    213c:	0f 90       	pop	r0
    213e:	cf 91       	pop	r28
    2140:	df 91       	pop	r29
    2142:	08 95       	ret

00002144 <uart_init>:

#include "uart.h"


void uart_init(const UART_config * cofig_Ptr)
{
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	00 d0       	rcall	.+0      	; 0x214a <uart_init+0x6>
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
    214e:	9a 83       	std	Y+2, r25	; 0x02
    2150:	89 83       	std	Y+1, r24	; 0x01

	UCSRB |= (1 << RXEN) | (1 << TXEN); // enable Tx, Rx
    2152:	aa e2       	ldi	r26, 0x2A	; 42
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	ea e2       	ldi	r30, 0x2A	; 42
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	88 61       	ori	r24, 0x18	; 24
    215e:	8c 93       	st	X, r24
	UCSRC |= (1 << URSEL) ;
    2160:	a0 e4       	ldi	r26, 0x40	; 64
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	e0 e4       	ldi	r30, 0x40	; 64
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	80 68       	ori	r24, 0x80	; 128
    216c:	8c 93       	st	X, r24

	/*double speed*/
	UCSRA = (UCSRA & 0xFD) | (double_speed << 1); // double speed
    216e:	ab e2       	ldi	r26, 0x2B	; 43
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	eb e2       	ldi	r30, 0x2B	; 43
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	82 60       	ori	r24, 0x02	; 2
    217a:	8c 93       	st	X, r24

	//UCSRC |=  (1 << UCSZ1) | (1 << UCSZ0); // 8 bit data
	UCSRC = (UCSRC & 0xF9) | ((cofig_Ptr->data_bits & 0x03)<<1);
    217c:	a0 e4       	ldi	r26, 0x40	; 64
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e0 e4       	ldi	r30, 0x40	; 64
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	28 2f       	mov	r18, r24
    2188:	29 7f       	andi	r18, 0xF9	; 249
    218a:	e9 81       	ldd	r30, Y+1	; 0x01
    218c:	fa 81       	ldd	r31, Y+2	; 0x02
    218e:	80 81       	ld	r24, Z
    2190:	88 2f       	mov	r24, r24
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	83 70       	andi	r24, 0x03	; 3
    2196:	90 70       	andi	r25, 0x00	; 0
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	82 2b       	or	r24, r18
    219e:	8c 93       	st	X, r24
	UCSRB = (UCSRB & 0xFB) | (cofig_Ptr->data_bits & 0x04);
    21a0:	aa e2       	ldi	r26, 0x2A	; 42
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	ea e2       	ldi	r30, 0x2A	; 42
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	98 2f       	mov	r25, r24
    21ac:	9b 7f       	andi	r25, 0xFB	; 251
    21ae:	e9 81       	ldd	r30, Y+1	; 0x01
    21b0:	fa 81       	ldd	r31, Y+2	; 0x02
    21b2:	80 81       	ld	r24, Z
    21b4:	84 70       	andi	r24, 0x04	; 4
    21b6:	89 2b       	or	r24, r25
    21b8:	8c 93       	st	X, r24

	/*parity*/
	UCSRC = (UCSRC & 0xCF) | (cofig_Ptr->parity << 4);
    21ba:	a0 e4       	ldi	r26, 0x40	; 64
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e0 e4       	ldi	r30, 0x40	; 64
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	28 2f       	mov	r18, r24
    21c6:	2f 7c       	andi	r18, 0xCF	; 207
    21c8:	e9 81       	ldd	r30, Y+1	; 0x01
    21ca:	fa 81       	ldd	r31, Y+2	; 0x02
    21cc:	81 81       	ldd	r24, Z+1	; 0x01
    21ce:	88 2f       	mov	r24, r24
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	82 95       	swap	r24
    21d4:	92 95       	swap	r25
    21d6:	90 7f       	andi	r25, 0xF0	; 240
    21d8:	98 27       	eor	r25, r24
    21da:	80 7f       	andi	r24, 0xF0	; 240
    21dc:	98 27       	eor	r25, r24
    21de:	82 2b       	or	r24, r18
    21e0:	8c 93       	st	X, r24

	/* stop_bit*/
	UCSRC = (UCSRC & 0xF7) | (cofig_Ptr->stop_bit << 3);
    21e2:	a0 e4       	ldi	r26, 0x40	; 64
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	e0 e4       	ldi	r30, 0x40	; 64
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	28 2f       	mov	r18, r24
    21ee:	27 7f       	andi	r18, 0xF7	; 247
    21f0:	e9 81       	ldd	r30, Y+1	; 0x01
    21f2:	fa 81       	ldd	r31, Y+2	; 0x02
    21f4:	82 81       	ldd	r24, Z+2	; 0x02
    21f6:	88 2f       	mov	r24, r24
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	88 0f       	add	r24, r24
    21fc:	99 1f       	adc	r25, r25
    21fe:	88 0f       	add	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	82 2b       	or	r24, r18
    2208:	8c 93       	st	X, r24

	/*mode*/
	UCSRC = (UCSRC & 0xBF) | (mode_bit << 6);
    220a:	a0 e4       	ldi	r26, 0x40	; 64
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	e0 e4       	ldi	r30, 0x40	; 64
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	8f 7b       	andi	r24, 0xBF	; 191
    2216:	8c 93       	st	X, r24

	UBRRL = BAUD_PRESCALE;
    2218:	e9 e2       	ldi	r30, 0x29	; 41
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	87 e6       	ldi	r24, 0x67	; 103
    221e:	80 83       	st	Z, r24
	UBRRH = BAUD_PRESCALE >> 8;
    2220:	e0 e4       	ldi	r30, 0x40	; 64
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	10 82       	st	Z, r1
}
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	cf 91       	pop	r28
    222c:	df 91       	pop	r29
    222e:	08 95       	ret

00002230 <uart_sendByte>:


void uart_sendByte(uint8 data)
{
    2230:	df 93       	push	r29
    2232:	cf 93       	push	r28
    2234:	0f 92       	push	r0
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	89 83       	std	Y+1, r24	; 0x01
	while (BIT_IS_CLEAR(UCSRA ,UDRE)){};
    223c:	eb e2       	ldi	r30, 0x2B	; 43
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	88 2f       	mov	r24, r24
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	80 72       	andi	r24, 0x20	; 32
    2248:	90 70       	andi	r25, 0x00	; 0
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	b9 f3       	breq	.-18     	; 0x223c <uart_sendByte+0xc>
	UDR = data;
    224e:	ec e2       	ldi	r30, 0x2C	; 44
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	80 83       	st	Z, r24
}
    2256:	0f 90       	pop	r0
    2258:	cf 91       	pop	r28
    225a:	df 91       	pop	r29
    225c:	08 95       	ret

0000225e <uart_recieveByte>:

uint8 uart_recieveByte(void)
{
    225e:	df 93       	push	r29
    2260:	cf 93       	push	r28
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(UCSRA ,RXC)){};
    2266:	eb e2       	ldi	r30, 0x2B	; 43
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	88 23       	and	r24, r24
    226e:	dc f7       	brge	.-10     	; 0x2266 <uart_recieveByte+0x8>
	return UDR;
    2270:	ec e2       	ldi	r30, 0x2C	; 44
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
}
    2276:	cf 91       	pop	r28
    2278:	df 91       	pop	r29
    227a:	08 95       	ret

0000227c <uart_sendString>:

void uart_sendString(const uint8 *str)
{
    227c:	df 93       	push	r29
    227e:	cf 93       	push	r28
    2280:	00 d0       	rcall	.+0      	; 0x2282 <uart_sendString+0x6>
    2282:	0f 92       	push	r0
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	9b 83       	std	Y+3, r25	; 0x03
    228a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    228c:	19 82       	std	Y+1, r1	; 0x01
    228e:	0e c0       	rjmp	.+28     	; 0x22ac <uart_sendString+0x30>
	while (str[i] != '\0')
	{
		uart_sendByte(str[i]);
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	8a 81       	ldd	r24, Y+2	; 0x02
    2298:	9b 81       	ldd	r25, Y+3	; 0x03
    229a:	fc 01       	movw	r30, r24
    229c:	e2 0f       	add	r30, r18
    229e:	f3 1f       	adc	r31, r19
    22a0:	80 81       	ld	r24, Z
    22a2:	0e 94 18 11 	call	0x2230	; 0x2230 <uart_sendByte>
		i++;
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	8f 5f       	subi	r24, 0xFF	; 255
    22aa:	89 83       	std	Y+1, r24	; 0x01
}

void uart_sendString(const uint8 *str)
{
	uint8 i = 0;
	while (str[i] != '\0')
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	28 2f       	mov	r18, r24
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	8a 81       	ldd	r24, Y+2	; 0x02
    22b4:	9b 81       	ldd	r25, Y+3	; 0x03
    22b6:	fc 01       	movw	r30, r24
    22b8:	e2 0f       	add	r30, r18
    22ba:	f3 1f       	adc	r31, r19
    22bc:	80 81       	ld	r24, Z
    22be:	88 23       	and	r24, r24
    22c0:	39 f7       	brne	.-50     	; 0x2290 <uart_sendString+0x14>
	{
		uart_sendByte(str[i]);
		i++;
	}
}
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <uart_recieveString>:

void uart_recieveString(uint8 *str)
{
    22ce:	0f 93       	push	r16
    22d0:	1f 93       	push	r17
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	00 d0       	rcall	.+0      	; 0x22d8 <uart_recieveString+0xa>
    22d8:	0f 92       	push	r0
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    22de:	9b 83       	std	Y+3, r25	; 0x03
    22e0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    22e2:	19 82       	std	Y+1, r1	; 0x01
	str[i] = uart_recieveByte();
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
    22e6:	28 2f       	mov	r18, r24
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	8a 81       	ldd	r24, Y+2	; 0x02
    22ec:	9b 81       	ldd	r25, Y+3	; 0x03
    22ee:	8c 01       	movw	r16, r24
    22f0:	02 0f       	add	r16, r18
    22f2:	13 1f       	adc	r17, r19
    22f4:	0e 94 2f 11 	call	0x225e	; 0x225e <uart_recieveByte>
    22f8:	f8 01       	movw	r30, r16
    22fa:	80 83       	st	Z, r24
    22fc:	0f c0       	rjmp	.+30     	; 0x231c <uart_recieveString+0x4e>
	while (str[i] != '#')
	{
		i++;
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	8f 5f       	subi	r24, 0xFF	; 255
    2302:	89 83       	std	Y+1, r24	; 0x01
		str[i] = uart_recieveByte();
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	28 2f       	mov	r18, r24
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	9b 81       	ldd	r25, Y+3	; 0x03
    230e:	8c 01       	movw	r16, r24
    2310:	02 0f       	add	r16, r18
    2312:	13 1f       	adc	r17, r19
    2314:	0e 94 2f 11 	call	0x225e	; 0x225e <uart_recieveByte>
    2318:	f8 01       	movw	r30, r16
    231a:	80 83       	st	Z, r24

void uart_recieveString(uint8 *str)
{
	uint8 i = 0;
	str[i] = uart_recieveByte();
	while (str[i] != '#')
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	28 2f       	mov	r18, r24
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	8a 81       	ldd	r24, Y+2	; 0x02
    2324:	9b 81       	ldd	r25, Y+3	; 0x03
    2326:	fc 01       	movw	r30, r24
    2328:	e2 0f       	add	r30, r18
    232a:	f3 1f       	adc	r31, r19
    232c:	80 81       	ld	r24, Z
    232e:	83 32       	cpi	r24, 0x23	; 35
    2330:	31 f7       	brne	.-52     	; 0x22fe <uart_recieveString+0x30>
	{
		i++;
		str[i] = uart_recieveByte();
	}
	str[i] = '\0';
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	28 2f       	mov	r18, r24
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	8a 81       	ldd	r24, Y+2	; 0x02
    233a:	9b 81       	ldd	r25, Y+3	; 0x03
    233c:	fc 01       	movw	r30, r24
    233e:	e2 0f       	add	r30, r18
    2340:	f3 1f       	adc	r31, r19
    2342:	10 82       	st	Z, r1
}
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	1f 91       	pop	r17
    2350:	0f 91       	pop	r16
    2352:	08 95       	ret

00002354 <__prologue_saves__>:
    2354:	2f 92       	push	r2
    2356:	3f 92       	push	r3
    2358:	4f 92       	push	r4
    235a:	5f 92       	push	r5
    235c:	6f 92       	push	r6
    235e:	7f 92       	push	r7
    2360:	8f 92       	push	r8
    2362:	9f 92       	push	r9
    2364:	af 92       	push	r10
    2366:	bf 92       	push	r11
    2368:	cf 92       	push	r12
    236a:	df 92       	push	r13
    236c:	ef 92       	push	r14
    236e:	ff 92       	push	r15
    2370:	0f 93       	push	r16
    2372:	1f 93       	push	r17
    2374:	cf 93       	push	r28
    2376:	df 93       	push	r29
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	ca 1b       	sub	r28, r26
    237e:	db 0b       	sbc	r29, r27
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	f8 94       	cli
    2384:	de bf       	out	0x3e, r29	; 62
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	cd bf       	out	0x3d, r28	; 61
    238a:	09 94       	ijmp

0000238c <__epilogue_restores__>:
    238c:	2a 88       	ldd	r2, Y+18	; 0x12
    238e:	39 88       	ldd	r3, Y+17	; 0x11
    2390:	48 88       	ldd	r4, Y+16	; 0x10
    2392:	5f 84       	ldd	r5, Y+15	; 0x0f
    2394:	6e 84       	ldd	r6, Y+14	; 0x0e
    2396:	7d 84       	ldd	r7, Y+13	; 0x0d
    2398:	8c 84       	ldd	r8, Y+12	; 0x0c
    239a:	9b 84       	ldd	r9, Y+11	; 0x0b
    239c:	aa 84       	ldd	r10, Y+10	; 0x0a
    239e:	b9 84       	ldd	r11, Y+9	; 0x09
    23a0:	c8 84       	ldd	r12, Y+8	; 0x08
    23a2:	df 80       	ldd	r13, Y+7	; 0x07
    23a4:	ee 80       	ldd	r14, Y+6	; 0x06
    23a6:	fd 80       	ldd	r15, Y+5	; 0x05
    23a8:	0c 81       	ldd	r16, Y+4	; 0x04
    23aa:	1b 81       	ldd	r17, Y+3	; 0x03
    23ac:	aa 81       	ldd	r26, Y+2	; 0x02
    23ae:	b9 81       	ldd	r27, Y+1	; 0x01
    23b0:	ce 0f       	add	r28, r30
    23b2:	d1 1d       	adc	r29, r1
    23b4:	0f b6       	in	r0, 0x3f	; 63
    23b6:	f8 94       	cli
    23b8:	de bf       	out	0x3e, r29	; 62
    23ba:	0f be       	out	0x3f, r0	; 63
    23bc:	cd bf       	out	0x3d, r28	; 61
    23be:	ed 01       	movw	r28, r26
    23c0:	08 95       	ret

000023c2 <itoa>:
    23c2:	fb 01       	movw	r30, r22
    23c4:	9f 01       	movw	r18, r30
    23c6:	e8 94       	clt
    23c8:	42 30       	cpi	r20, 0x02	; 2
    23ca:	c4 f0       	brlt	.+48     	; 0x23fc <itoa+0x3a>
    23cc:	45 32       	cpi	r20, 0x25	; 37
    23ce:	b4 f4       	brge	.+44     	; 0x23fc <itoa+0x3a>
    23d0:	4a 30       	cpi	r20, 0x0A	; 10
    23d2:	29 f4       	brne	.+10     	; 0x23de <itoa+0x1c>
    23d4:	97 fb       	bst	r25, 7
    23d6:	1e f4       	brtc	.+6      	; 0x23de <itoa+0x1c>
    23d8:	90 95       	com	r25
    23da:	81 95       	neg	r24
    23dc:	9f 4f       	sbci	r25, 0xFF	; 255
    23de:	64 2f       	mov	r22, r20
    23e0:	77 27       	eor	r23, r23
    23e2:	0e 94 12 12 	call	0x2424	; 0x2424 <__udivmodhi4>
    23e6:	80 5d       	subi	r24, 0xD0	; 208
    23e8:	8a 33       	cpi	r24, 0x3A	; 58
    23ea:	0c f0       	brlt	.+2      	; 0x23ee <itoa+0x2c>
    23ec:	89 5d       	subi	r24, 0xD9	; 217
    23ee:	81 93       	st	Z+, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	00 97       	sbiw	r24, 0x00	; 0
    23f4:	a1 f7       	brne	.-24     	; 0x23de <itoa+0x1c>
    23f6:	16 f4       	brtc	.+4      	; 0x23fc <itoa+0x3a>
    23f8:	5d e2       	ldi	r21, 0x2D	; 45
    23fa:	51 93       	st	Z+, r21
    23fc:	10 82       	st	Z, r1
    23fe:	c9 01       	movw	r24, r18
    2400:	0c 94 02 12 	jmp	0x2404	; 0x2404 <strrev>

00002404 <strrev>:
    2404:	dc 01       	movw	r26, r24
    2406:	fc 01       	movw	r30, r24
    2408:	67 2f       	mov	r22, r23
    240a:	71 91       	ld	r23, Z+
    240c:	77 23       	and	r23, r23
    240e:	e1 f7       	brne	.-8      	; 0x2408 <strrev+0x4>
    2410:	32 97       	sbiw	r30, 0x02	; 2
    2412:	04 c0       	rjmp	.+8      	; 0x241c <strrev+0x18>
    2414:	7c 91       	ld	r23, X
    2416:	6d 93       	st	X+, r22
    2418:	70 83       	st	Z, r23
    241a:	62 91       	ld	r22, -Z
    241c:	ae 17       	cp	r26, r30
    241e:	bf 07       	cpc	r27, r31
    2420:	c8 f3       	brcs	.-14     	; 0x2414 <strrev+0x10>
    2422:	08 95       	ret

00002424 <__udivmodhi4>:
    2424:	aa 1b       	sub	r26, r26
    2426:	bb 1b       	sub	r27, r27
    2428:	51 e1       	ldi	r21, 0x11	; 17
    242a:	07 c0       	rjmp	.+14     	; 0x243a <__udivmodhi4_ep>

0000242c <__udivmodhi4_loop>:
    242c:	aa 1f       	adc	r26, r26
    242e:	bb 1f       	adc	r27, r27
    2430:	a6 17       	cp	r26, r22
    2432:	b7 07       	cpc	r27, r23
    2434:	10 f0       	brcs	.+4      	; 0x243a <__udivmodhi4_ep>
    2436:	a6 1b       	sub	r26, r22
    2438:	b7 0b       	sbc	r27, r23

0000243a <__udivmodhi4_ep>:
    243a:	88 1f       	adc	r24, r24
    243c:	99 1f       	adc	r25, r25
    243e:	5a 95       	dec	r21
    2440:	a9 f7       	brne	.-22     	; 0x242c <__udivmodhi4_loop>
    2442:	80 95       	com	r24
    2444:	90 95       	com	r25
    2446:	bc 01       	movw	r22, r24
    2448:	cd 01       	movw	r24, r26
    244a:	08 95       	ret

0000244c <_exit>:
    244c:	f8 94       	cli

0000244e <__stop_program>:
    244e:	ff cf       	rjmp	.-2      	; 0x244e <__stop_program>
